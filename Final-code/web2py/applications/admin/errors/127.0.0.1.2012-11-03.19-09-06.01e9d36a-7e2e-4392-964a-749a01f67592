(dp1
S'output'
p2
S"<type 'exceptions.OSError'> [Errno 2] No such file or directory: '/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/taship1/languages'"
p3
sS'layer'
p4
S'/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/admin/controllers/default.py'
p5
sS'code'
p6
S'# coding: utf8\n\nEXPERIMENTAL_STUFF = True\n\nif EXPERIMENTAL_STUFF:\n    is_mobile = request.user_agent().is_mobile\n    if is_mobile:\n        response.view = response.view.replace(\'default/\',\'default.mobile/\')\n        response.menu = []\n\nimport re\nfrom gluon.admin import *\nfrom gluon.fileutils import abspath, read_file, write_file\nfrom gluon.utils import web2py_uuid\nfrom glob import glob\nimport shutil\nimport platform\ntry:                                                                                      \n    from git import *                                                                     \n    have_git = True\nexcept ImportError:                                                                       \n    have_git = False\n    GIT_MISSING = \'requires python-git module, but not installed or incompatible version\'\n\nfrom gluon.languages import (regex_language, read_possible_languages,\n                             lang_sampling,\n                             read_dict, write_dict, read_plural_dict,\n                             write_plural_dict, PLURAL_RULES)\n\n\nif DEMO_MODE and request.function in [\'change_password\',\'pack\',\'pack_plugin\',\'upgrade_web2py\',\'uninstall\',\'cleanup\',\'compile_app\',\'remove_compiled_app\',\'delete\',\'delete_plugin\',\'create_file\',\'upload_file\',\'update_languages\',\'reload_routes\',\'git_push\',\'git_pull\']:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\n\nif not is_manager() and request.function in [\'change_password\',\'upgrade_web2py\']:\n    session.flash = T(\'disabled in multi user mode\')\n    redirect(URL(\'site\'))\n\nif FILTER_APPS and request.args(0) and not request.args(0) in FILTER_APPS:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\n\nif not session.token: session.token = web2py_uuid()\n\ndef count_lines(data):\n    return len([line for line in data.split(\'\\n\') if line.strip() and not line.startswith(\'#\')])\n\ndef log_progress(app,mode=\'EDIT\',filename=None,progress=0):\n    progress_file = os.path.join(apath(app, r=request), \'progress.log\')\n    now = str(request.now)[:19]\n    if not os.path.exists(progress_file):\n        safe_open(progress_file,\'w\').write(\'[%s] START\\n\' % now)\n    if filename:\n        safe_open(progress_file,\'a\').write(\'[%s] %s %s: %s\\n\' % (now,mode,filename,progress))\n\ndef safe_open(a,b):\n    if DEMO_MODE and (\'w\' in b or \'a\' in b):\n        class tmp:\n            def write(self,data): pass\n        return tmp()\n    return open(a,b)\n\ndef safe_read(a, b=\'r\'):\n    safe_file = safe_open(a, b)\n    try:\n        return safe_file.read()\n    finally:\n        safe_file.close()\n\ndef safe_write(a, value, b=\'w\'):\n    safe_file = safe_open(a, b)\n    try:\n        safe_file.write(value)\n    finally:\n        safe_file.close()\n\ndef get_app(name=None):\n    app = name or request.args(0)\n    if app and (not MULTI_USER_MODE or is_manager() or \\\n                    db(db.app.name==app)(db.app.owner==auth.user.id).count()):\n        return app\n    session.flash = T(\'App does not exist or your are not authorized\')\n    redirect(URL(\'site\'))\n\ndef index():\n    """ Index handler """\n\n    send = request.vars.send\n    if DEMO_MODE:\n        session.authorized = True\n        session.last_time = t0\n    if not send:\n        send = URL(\'site\')\n    if session.authorized:\n        redirect(send)\n    elif request.vars.password:\n        if verify_password(request.vars.password):\n            session.authorized = True\n            login_record(True)\n\n            if CHECK_VERSION:\n                session.check_version = True\n            else:\n                session.check_version = False\n\n            session.last_time = t0\n            if isinstance(send, list):  # ## why does this happen?\n                send = str(send[0])\n\n            redirect(send)\n        else:\n            times_denied = login_record(False)\n            if times_denied >= allowed_number_of_attempts:\n                response.flash = \\\n                    T(\'admin disabled because too many invalid login attempts\')\n            elif times_denied == allowed_number_of_attempts - 1:\n                response.flash = \\\n                    T(\'You have one more login attempt before you are locked out\')\n            else:\n                response.flash = T(\'invalid password.\')\n    return dict(send=send)\n\n\ndef check_version():\n    """ Checks if web2py is up to date """\n\n    session.forget()\n    session._unlock(response)\n\n    new_version, version_number = check_new_version(request.env.web2py_version,\n                                    WEB2PY_VERSION_URL)\n\n    if new_version == -1:\n        return A(T(\'Unable to check for upgrades\'), _href=WEB2PY_URL)\n    elif new_version != True:\n        return A(T(\'web2py is up to date\'), _href=WEB2PY_URL)\n    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):\n        return SPAN(\'You should upgrade to version %s.%s.%s\' % version_number[:3])\n    else:\n        return sp_button(URL(\'upgrade_web2py\'), T(\'upgrade now\')) \\\n            + XML(\' <strong class="upgrade_version">%s.%s.%s</strong>\' \\\n                      % version_number[:3])\n\ndef logout():\n    """ Logout handler """\n    session.authorized = None\n    if MULTI_USER_MODE:\n        redirect(URL(\'user/logout\'))\n    redirect(URL(\'index\'))\n\n\ndef change_password():\n\n    if session.pam_user:\n        session.flash = T(\'PAM authenticated user, cannot change password here\')\n        redirect(URL(\'site\'))\n    form=SQLFORM.factory(Field(\'current_admin_password\',\'password\'),\n                         Field(\'new_admin_password\',\'password\',requires=IS_STRONG()),\n                         Field(\'new_admin_password_again\',\'password\'))\n    if form.accepts(request.vars):\n        if not verify_password(request.vars.current_admin_password):\n            form.errors.current_admin_password = T(\'invalid password\')\n        elif form.vars.new_admin_password != form.vars.new_admin_password_again:\n            form.errors.new_admin_password_again = T(\'no match\')\n        else:\n            path = abspath(\'parameters_%s.py\' % request.env.server_port)\n            safe_write(path, \'password="%s"\' % CRYPT()(request.vars.new_admin_password)[0])\n            session.flash = T(\'password changed\')\n            redirect(URL(\'site\'))\n    return dict(form=form)\n\n\ndef site():\n    """ Site handler """\n\n    myversion = request.env.web2py_version\n\n    # Shortcut to make the elif statements more legible\n    file_or_appurl = \'file\' in request.vars or \'appurl\' in request.vars\n\n    class IS_VALID_APPNAME(object):\n        def __call__(self,value):\n            if not re.compile(\'\\w+\').match(value):\n                return (value,T(\'Invalid application name\'))\n            if not request.vars.overwrite and \\\n                    os.path.exists(os.path.join(apath(r=request),value)):\n                return (value,T(\'Application exists already\'))\n            return (value,None)\n\n    is_appname = IS_VALID_APPNAME()\n    form_create = SQLFORM.factory(Field(\'name\',requires=is_appname),\n                                  table_name=\'appcreate\')\n    form_update = SQLFORM.factory(Field(\'name\',requires=is_appname),\n                                  Field(\'file\',\'upload\',uploadfield=False),\n                                  Field(\'url\'),\n                                  Field(\'overwrite\',\'boolean\'),\n                                  table_name=\'appupdate\')\n    form_create.process()\n    form_update.process()\n\n    if DEMO_MODE:\n        pass\n\n    elif form_create.accepted:\n        # create a new application\n        appname = cleanpath(form_create.vars.name)\n        created, error = app_create(appname, request,info=True)\n        if created:\n            if MULTI_USER_MODE:\n                db.app.insert(name=appname,owner=auth.user.id)\n            log_progress(appname)\n            session.flash = T(\'new application "%s" created\', appname)\n            redirect(URL(\'design\',args=appname))\n        else:\n            session.flash = \\\n                DIV(T(\'unable to create application "%s"\' % appname),\n                    PRE(error))                      \n        redirect(URL(r=request))\n\n    elif form_update.accepted:\n        if (form_update.vars.url or \'\').endswith(\'.git\'):\n            if not have_git:\n                session.flash = GIT_MISSING\n                redirect(URL(r=request))\n            target = os.path.join(apath(r=request),form_update.vars.name)\n            try:\n                new_repo = Repo.clone_from(form_update.vars.url,target)\n                session.flash = T(\'new application "%s" imported\',\n                                  form_update.vars.name)\n            except GitCommandError, err:\n                session.flash = T(\'Invalid git repository specified.\')\n            redirect(URL(r=request))\n\n        elif form_update.vars.url:\n            # fetch an application via URL or file upload\n            try:\n                f = urllib.urlopen(form_update.vars.url)\n                if f.code == 404:\n                    raise Exception("404 file not found")\n            except Exception, e:\n                session.flash = \\\n                    DIV(T(\'Unable to download app because:\'),PRE(str(e)))\n                redirect(URL(r=request))\n            fname = form_update.vars.url\n            \n        elif form_update.accepted and form_update.vars.file:\n            fname = request.vars.file.filename\n            f = request.vars.file.file\n            \n        else:\n            session.flash = \'No file uploaded and no URL specified\'\n            redirect(URL(r=request))\n\n        if f:\n            appname = cleanpath(form_update.vars.name)\n            installed = app_install(appname, f, \n                                    request, fname,\n                                    overwrite=form_update.vars.overwrite)\n        if f and installed:\n            msg = \'application %(appname)s installed with md5sum: %(digest)s\'\n            if MULTI_USER_MODE:\n                db.app.insert(name=appname,owner=auth.user.id)\n            log_progress(appname)\n            session.flash = T(msg, dict(appname=appname,\n                                        digest=md5_hash(installed)))\n        elif f and form_update.vars.overwrite:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=form_update.vars.name))\n        else:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=form_update.vars.name))\n        redirect(URL(r=request))\n\n    regex = re.compile(\'^\\w+$\')\n\n    if is_manager():\n        apps = [f for f in os.listdir(apath(r=request)) if regex.match(f)]\n    else:\n        apps = [f.name for f in db(db.app.owner==auth.user_id).select()]\n\n    if FILTER_APPS:\n        apps = [f for f in apps if f in FILTER_APPS]\n\n    apps = sorted(apps,lambda a,b:cmp(a.upper(),b.upper()))\n\n    return dict(app=None, apps=apps, myversion=myversion, \n                form_create=form_create, form_update=form_update)\n\n\ndef report_progress(app):\n    import datetime\n    progress_file = os.path.join(apath(app, r=request), \'progress.log\')\n    regex = re.compile(\'\\[(.*?)\\][^\\:]+\\:\\s+(\\-?\\d+)\')\n    if not os.path.exists(progress_file):\n        return []\n    matches = regex.findall(open(progress_file,\'r\').read())\n    events,counter = [],0\n    for m in matches:\n        if not m: continue\n        days = -(request.now - datetime.datetime.strptime(m[0],\'%Y-%m-%d %H:%M:%S\')).days\n        counter += int(m[1])\n        events.append([days,counter])\n    return events\n\n\ndef pack():\n    app = get_app()\n\n    try:\n        if len(request.args) == 1:\n            fname = \'web2py.app.%s.w2p\' % app\n            filename = app_pack(app, request, raise_ex=True)\n        else:\n            fname = \'web2py.app.%s.compiled.w2p\' % app\n            filename = app_pack_compiled(app, request, raise_ex=True)\n    except Exception, e:\n        filename = None\n\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error: %s\' % e)\n        redirect(URL(\'site\'))\n\ndef pack_plugin():\n    app = get_app()\n    if len(request.args) == 2:\n        fname = \'web2py.plugin.%s.w2p\' % request.args[1]\n        filename = plugin_pack(app, request.args[1], request)\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'plugin\',args=request.args))\n\ndef upgrade_web2py():\n    dialog = FORM.confirm(T(\'Upgrade\'),\n                         {T(\'Cancel\'):URL(\'site\')})    \n    if dialog.accepted:\n        (success, error) = upgrade(request)\n        if success:\n            session.flash = T(\'web2py upgraded; please restart it\')\n        else:\n            session.flash = T(\'unable to upgrade because "%s"\', error)\n        redirect(URL(\'site\'))\n    return dict(dialog=dialog)\n\ndef uninstall():\n    app = get_app()\n\n    dialog = FORM.confirm(T(\'Uninstall\'),\n                         {T(\'Cancel\'):URL(\'site\')})\n    \n    if dialog.accepted:\n        if MULTI_USER_MODE:\n            if is_manager() and db(db.app.name==app).delete():\n                pass\n            elif db(db.app.name==app)(db.app.owner==auth.user.id).delete():\n                pass\n            else:\n                session.flash = T(\'no permission to uninstall "%s"\', app)\n                redirect(URL(\'site\'))\n        if app_uninstall(app, request):\n            session.flash = T(\'application "%s" uninstalled\', app)\n        else:\n            session.flash = T(\'unable to uninstall "%s"\', app)\n        redirect(URL(\'site\'))\n    return dict(app=app, dialog=dialog)\n\n\ndef cleanup():\n    app = get_app()\n    clean = app_cleanup(app, request)\n    if not clean:\n        session.flash = T("some files could not be removed")\n    else:\n        session.flash = T(\'cache, errors and sessions cleaned\')\n\n    redirect(URL(\'site\'))\n\n\ndef compile_app():\n    app = get_app()\n    c = app_compile(app, request)\n    if not c:\n        session.flash = T(\'application compiled\')\n    else:\n        session.flash = DIV(T(\'Cannot compile: there are errors in your app:\'),\n                              CODE(c))\n    redirect(URL(\'site\'))\n\n\ndef remove_compiled_app():\n    """ Remove the compiled application """\n    app = get_app()\n    remove_compiled_application(apath(app, r=request))\n    session.flash = T(\'compiled application removed\')\n    redirect(URL(\'site\'))\n\ndef delete():\n    """ Object delete handler """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    sender = request.vars.sender\n\n    if isinstance(sender, list):  # ## fix a problem with Vista\n        sender = sender[0]\n\n    if \'nodelete\' in request.vars:\n        redirect(URL(sender, anchor=request.vars.id))\n    elif \'delete\' in request.vars:\n        try:\n            full_path = apath(filename, r=request)\n            lineno = count_lines(open(full_path,\'r\').read())\n            os.unlink(full_path)\n            log_progress(app,\'DELETE\',filename,progress=-lineno)\n            session.flash = T(\'file "%(filename)s" deleted\',\n                              dict(filename=filename))\n        except Exception:\n            session.flash = T(\'unable to delete file "%(filename)s"\',\n                              dict(filename=filename))\n        redirect(URL(sender, anchor=request.vars.id2))\n    return dict(filename=filename, sender=sender)\n\ndef delete():\n    """ Object delete handler """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    sender = request.vars.sender\n\n    if isinstance(sender, list):  # ## fix a problem with Vista\n        sender = sender[0]\n\n    dialog = FORM.confirm(T(\'Delete\'),\n                         {T(\'Cancel\'):URL(sender, anchor=request.vars.id)})\n\n    if dialog.accepted:\n        try:\n            full_path = apath(filename, r=request)\n            lineno = count_lines(open(full_path,\'r\').read())\n            os.unlink(full_path)\n            log_progress(app,\'DELETE\',filename,progress=-lineno)\n            session.flash = T(\'file "%(filename)s" deleted\',\n                              dict(filename=filename))\n        except Exception:\n            session.flash = T(\'unable to delete file "%(filename)s"\',\n                              dict(filename=filename))\n        redirect(URL(sender, anchor=request.vars.id2))\n    return dict(dialog=dialog,filename=filename)\n\ndef enable():\n    app = get_app()\n    filename = os.path.join(apath(app, r=request),\'DISABLED\')\n    if is_gae:\n        return SPAN(T(\'Not supported\'),_style=\'color:yellow\')\n    elif os.path.exists(filename):\n        os.unlink(filename)\n        return SPAN(T(\'Disable\'),_style=\'color:green\')\n    else:\n        safe_open(filename,\'wb\').write(time.ctime())\n        return SPAN(T(\'Enable\'),_style=\'color:red\')\n\ndef peek():\n    """ Visualize object code """\n    app = get_app(request.vars.app)\n    filename = \'/\'.join(request.args)\n    if request.vars.app:\n        path = abspath(filename)\n    else:\n        path = apath(filename, r=request)\n    try:\n        data = safe_read(path).replace(\'\\r\',\'\')\n    except IOError:\n        session.flash = T(\'file does not exist\')\n        redirect(URL(\'site\'))\n\n    extension = filename[filename.rfind(\'.\') + 1:].lower()\n\n    return dict(app=app,\n                filename=filename,\n                data=data,\n                extension=extension)\n\ndef test():\n    """ Execute controller tests """\n    app = get_app()\n    if len(request.args) > 1:\n        file = request.args[1]\n    else:\n        file = \'.*\\.py\'\n\n    controllers = listdir(apath(\'%s/controllers/\' % app, r=request), file + \'$\')\n\n    return dict(app=app, controllers=controllers)\n\ndef keepalive():\n    return \'\'\n\ndef search():\n    keywords=request.vars.keywords or \'\'\n    app = get_app()\n    def match(filename,keywords):\n        filename=os.path.join(apath(app, r=request),filename)\n        if keywords in read_file(filename,\'rb\'):\n            return True\n        return False\n    path = apath(request.args[0], r=request)\n    files1 = glob(os.path.join(path,\'*/*.py\'))\n    files2 = glob(os.path.join(path,\'*/*.html\'))\n    files3 = glob(os.path.join(path,\'*/*/*.html\'))\n    files=[x[len(path)+1:].replace(\'\\\\\',\'/\') for x in files1+files2+files3 if match(x,keywords)]\n    return response.json(dict(files=files, message=T.M(\'Searching: **%s** %%{file}\', len(files))))\n\ndef edit():\n    """ File edit handler """\n    # Load json only if it is ajax edited...\n    app = get_app(request.vars.app)\n    filename = \'/\'.join(request.args)\n    if request.vars.app:\n        path = abspath(filename)\n    else:\n        path = apath(filename, r=request)\n     # Try to discover the file type\n    if filename[-3:] == \'.py\':\n        filetype = \'python\'\n    elif filename[-5:] == \'.html\':\n        filetype = \'html\'\n    elif filename[-5:] == \'.load\':\n        filetype = \'html\'\n    elif filename[-4:] == \'.css\':\n        filetype = \'css\'\n    elif filename[-3:] == \'.js\':\n        filetype = \'js\'\n    else:\n        filetype = \'html\'\n\n    # ## check if file is not there\n    if (\'revert\' in request.vars) and os.path.exists(path + \'.bak\'):\n        try:\n            data = safe_read(path + \'.bak\')\n            data1 = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                 return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        safe_write(path, data)\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n        safe_write(path + \'.bak\', data1)\n        response.flash = T(\'file "%s" of %s restored\', (filename, saved_on))\n    else:\n        try:\n            data = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        lineno_old = count_lines(data)\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n\n        if request.vars.file_hash and request.vars.file_hash != file_hash:\n            session.flash = T(\'file changed on disk\')\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path + \'.1\', data)\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'file changed on disk\')),\n                                      \'redirect\': URL(\'resolve\',\n                                                      args=request.args)})\n            else:\n                redirect(URL(\'resolve\', args=request.args))\n        elif request.vars.data:\n            safe_write(path + \'.bak\', data)\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path, data)\n            lineno_new = count_lines(data)\n            log_progress(app,\'EDIT\',filename,progress=lineno_new-lineno_old)\n            file_hash = md5_hash(data)\n            saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n            response.flash = T(\'file saved on %s\', saved_on)\n\n    data_or_revert = (request.vars.data or request.vars.revert)\n\n    # Check compile errors\n    highlight = None\n    if filetype == \'python\' and request.vars.data:\n        import _ast\n        try:\n            code = request.vars.data.rstrip().replace(\'\\r\\n\',\'\\n\')+\'\\n\'\n            compile(code, path, "exec", _ast.PyCF_ONLY_AST)\n        except Exception, e:\n            start = sum([len(line)+1 for l, line\n                            in enumerate(request.vars.data.split("\\n"))\n                            if l < e.lineno-1])\n            if e.text and e.offset:\n                offset = e.offset - (len(e.text) - len(e.text.splitlines()[-1]))\n            else:\n                offset = 0\n            highlight = {\'start\': start, \'end\': start + offset + 1, \'lineno\': e.lineno}\n            try:\n                ex_name = e.__class__.__name__\n            except:\n                ex_name = \'unknown exception!\'\n            response.flash = DIV(T(\'failed to compile file because:\'), BR(),\n                                 B(ex_name), \' \'+T(\'at line %s\', e.lineno),\n                                 offset and \' \'+T(\'at char %s\', offset) or \'\',\n                                 PRE(str(e)))\n\n    if data_or_revert and request.args[1] == \'modules\':\n        # Lets try to reload the modules\n        try:\n            mopath = \'.\'.join(request.args[2:])[:-3]\n            exec \'import applications.%s.modules.%s\' % (request.args[0], mopath)\n            reload(sys.modules[\'applications.%s.modules.%s\'\n                    % (request.args[0], mopath)])\n        except Exception, e:\n            response.flash = DIV(T(\'failed to reload module because:\'),PRE(str(e)))\n\n    edit_controller = None\n    editviewlinks = None\n    view_link = None\n    if filetype == \'html\' and len(request.args) >= 3:\n        cfilename = os.path.join(request.args[0], \'controllers\',\n                                 request.args[2] + \'.py\')\n        if os.path.exists(apath(cfilename, r=request)):\n            edit_controller = URL(\'edit\', args=[cfilename])\n            view = request.args[3].replace(\'.html\',\'\')\n            view_link = URL(request.args[0],request.args[2],view)\n    elif filetype == \'python\' and request.args[1] == \'controllers\':\n        ## it\'s a controller file.\n        ## Create links to all of the associated view files.\n        app = get_app()\n        viewname = os.path.splitext(request.args[2])[0]\n        viewpath = os.path.join(app,\'views\',viewname)\n        aviewpath = apath(viewpath, r=request)\n        viewlist = []\n        if os.path.exists(aviewpath):\n            if os.path.isdir(aviewpath):\n                viewlist = glob(os.path.join(aviewpath,\'*.html\'))\n        elif os.path.exists(aviewpath+\'.html\'):\n            viewlist.append(aviewpath+\'.html\')\n        if len(viewlist):\n            editviewlinks = []\n            for v in viewlist:\n                vf = os.path.split(v)[-1]\n                vargs = "/".join([viewpath.replace(os.sep,"/"),vf])\n                editviewlinks.append(A(vf.split(".")[0],\\\n                    _href=URL(\'edit\',args=[vargs])))\n\n    if len(request.args) > 2 and request.args[1] == \'controllers\':\n        controller = (request.args[2])[:-3]\n        functions = regex_expose.findall(data)\n    else:\n        (controller, functions) = (None, None)\n\n    if \'from_ajax\' in request.vars:\n        return response.json({\'file_hash\': file_hash, \'saved_on\': saved_on, \'functions\':functions, \'controller\': controller, \'application\': request.args[0], \'highlight\': highlight })\n    else:\n\n        editarea_preferences = {}\n        editarea_preferences[\'FONT_SIZE\'] = \'10\'\n        editarea_preferences[\'FULL_SCREEN\'] = \'false\'\n        editarea_preferences[\'ALLOW_TOGGLE\'] = \'true\'\n        editarea_preferences[\'REPLACE_TAB_BY_SPACES\'] = \'4\'\n        editarea_preferences[\'DISPLAY\'] = \'onload\'\n        for key in editarea_preferences:\n            if globals().has_key(key):\n                editarea_preferences[key]=globals()[key]\n        return dict(app=request.args[0],\n                    filename=filename,\n                    filetype=filetype,\n                    data=data,\n                    edit_controller=edit_controller,\n                    file_hash=file_hash,\n                    saved_on=saved_on,\n                    controller=controller,\n                    functions=functions,\n                    view_link=view_link,\n                    editarea_preferences=editarea_preferences,\n                    editviewlinks=editviewlinks)\n\ndef resolve():\n    """\n    """\n\n    filename = \'/\'.join(request.args)\n    # ## check if file is not there\n    path = apath(filename, r=request)\n    a = safe_read(path).split(\'\\n\')\n    try:\n        b = safe_read(path + \'.1\').split(\'\\n\')\n    except IOError:\n        session.flash = \'Other file, no longer there\'\n        redirect(URL(\'edit\', args=request.args))\n\n    d = difflib.ndiff(a, b)\n\n    def leading(line):\n        """  """\n\n        # TODO: we really need to comment this\n        z = \'\'\n        for (k, c) in enumerate(line):\n            if c == \' \':\n                z += \'&nbsp;\'\n            elif c == \' \\t\':\n                z += \'&nbsp;\'\n            elif k == 0 and c == \'?\':\n                pass\n            else:\n                break\n\n        return XML(z)\n\n    def getclass(item):\n        """ Determine item class """\n\n        if item[0] == \' \':\n            return \'normal\'\n        if item[0] == \'+\':\n            return \'plus\'\n        if item[0] == \'-\':\n            return \'minus\'\n\n    if request.vars:\n        c = \'\\n\'.join([item[2:].rstrip() for (i, item) in enumerate(d) if item[0] \\\n                           == \' \' or \'line%i\' % i in request.vars])\n        safe_write(path, c)\n        session.flash = \'files merged\'\n        redirect(URL(\'edit\', args=request.args))\n    else:\n        # Making the short circuit compatible with <= python2.4\n        gen_data = lambda index,item: not item[:1] in [\'+\',\'-\'] and "" \\\n                   or INPUT(_type=\'checkbox\',\n                            _name=\'line%i\' % index,\n                            value=item[0] == \'+\')\n\n        diff = TABLE(*[TR(TD(gen_data(i,item)),\n                          TD(item[0]),\n                          TD(leading(item[2:]),\n                          TT(item[2:].rstrip())), _class=getclass(item))\n                       for (i, item) in enumerate(d) if item[0] != \'?\'])\n\n    return dict(diff=diff, filename=filename)\n\n\ndef edit_language():\n    """ Edit language file """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    strings = read_dict(apath(filename, r=request))\n\n    if \'__corrupted__\' in strings:\n       form = SPAN(strings[\'__corrupted__\'],_class=\'error\')\n       return dict(filename=filename, form=form)\n\n    keys = sorted(strings.keys(),lambda x,y: cmp(unicode(x,\'utf-8\').lower(), unicode(y,\'utf-8\').lower()))\n    rows = []\n    rows.append(H2(T(\'Original/Translation\')))\n\n    for key in keys:\n        name = md5_hash(key)\n        s = strings[key]\n        (prefix, sep, key) = key.partition(\'\\x01\')\n        if sep:\n            prefix = SPAN(prefix+\': \', _class=\'tm_ftag\')\n            k = key\n        else:\n            (k, prefix) = (prefix, \'\')\n\n        _class=\'untranslated\' if k==s else \'translated\'\n\n        if len(key) <= 40:\n            elem = INPUT(_type=\'text\', _name=name, value=s,\n                         _size=70,_class=_class)\n        else:\n            elem = TEXTAREA(_name=name, value=s, _cols=70,\n                            _rows=5, _class=_class)\n\n        # Making the short circuit compatible with <= python2.4\n        k = (s != k) and k or B(k)\n\n        rows.append(P(prefix, k, BR(), elem, TAG.BUTTON(T(\'delete\'),\n                            _onclick=\'return delkey("%s")\' % name), _id=name))\n\n    rows.append(INPUT(_type=\'submit\', _value=T(\'update\')))\n    form = FORM(*rows)\n    if form.accepts(request.vars, keepvalues=True):\n        strs = dict()\n        for key in keys:\n            name = md5_hash(key)\n            if form.vars[name]==chr(127): continue\n            strs[key] = form.vars[name]\n        write_dict(apath(filename, r=request), strs)\n        session.flash = T(\'file saved on %(time)s\', dict(time=time.ctime()))\n        redirect(URL(r=request,args=request.args))\n    return dict(app=request.args[0], filename=filename, form=form)\n\ndef edit_plurals():\n    """ Edit plurals file """\n    #import ipdb; ipdb.set_trace()\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    plurals = read_plural_dict(apath(filename, r=request)) # plural forms dictionary\n    nplurals = int(request.vars.nplurals)-1 # plural forms quantity\n    xnplurals = xrange(nplurals)\n\n    if \'__corrupted__\' in plurals:\n       # show error message and exit\n       form = SPAN(plurals[\'__corrupted__\'],_class=\'error\')\n       return dict(filename=filename, form=form)\n\n    keys = sorted(plurals.keys(),lambda x,y: cmp(unicode(x,\'utf-8\').lower(), unicode(y,\'utf-8\').lower()))\n    rows = []\n\n    row=[T("Singular Form")]\n    row.extend([T("Plural Form #%s", n+1) for n in xnplurals])\n    table=TABLE(THEAD(TR(row)))\n\n    for key in keys:\n        name = md5_hash(key)\n        forms = plurals[key]\n\n        if len(forms) < nplurals:\n            forms.extend(None for i in xrange(nplurals-len(forms)))\n\n        row = [B(key)]\n        row.extend([INPUT(_type=\'text\', _name=name+\'_\'+str(n), value=forms[n], _size=20) for n in xnplurals])\n        row.append(TD(TAG.BUTTON(T(\'delete\'), _onclick=\'return delkey("%s")\' % name)))\n        rows.append(TR(row, _id=name))\n    if rows:\n        table.append(TBODY(rows))\n    rows=[table, INPUT(_type=\'submit\', _value=T(\'update\'))]\n    form = FORM(*rows)\n    if form.accepts(request.vars, keepvalues=True):\n        new_plurals = dict()\n        for key in keys:\n            name = md5_hash(key)\n            if form.vars[name+\'_0\']==chr(127): continue\n            new_plurals[key] = [form.vars[name+\'_\'+str(n)] for n in xnplurals]\n        write_plural_dict(apath(filename, r=request), new_plurals)\n        session.flash = T(\'file saved on %(time)s\', dict(time=time.ctime()))\n        redirect(URL(r=request, args=request.args, vars=dict(nplurals=request.vars.nplurals)))\n    return dict(app=request.args[0], filename=filename, form=form)\n\n\ndef about():\n    """ Read about info """\n    app = get_app()\n    # ## check if file is not there\n    about = safe_read(apath(\'%s/ABOUT\' % app, r=request))\n    license = safe_read(apath(\'%s/LICENSE\' % app, r=request))\n    return dict(app=app, about=MARKMIN(about), license=MARKMIN(license),progress=report_progress(app))\n\n\ndef design():\n    """ Application design handler """\n    app = get_app()\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    if request.vars and not request.vars.token==session.token:\n        redirect(URL(\'logout\'))\n\n    if request.vars.pluginfile!=None and not isinstance(request.vars.pluginfile,str):\n        filename=os.path.basename(request.vars.pluginfile.filename)\n        if plugin_install(app, request.vars.pluginfile.file,\n                          request, filename):\n            session.flash = T(\'new plugin installed\')\n            redirect(URL(\'design\',args=app))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s"\', request.vars.filename)\n        redirect(URL(r=request))\n    elif isinstance(request.vars.pluginfile,str):\n        session.flash = T(\'plugin not specified\')\n        redirect(URL(r=request))\n\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+(\\.\\w+)+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views if not x.endswith(\'.bak\')]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all private files\n    privates = listdir(apath(\'%s/private/\' % app, r=request), \'[^\\.#].*\')\n    privates = [x.replace(\'\\\\\',\'/\') for x in privates]\n    privates.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    all_languages=dict([(lang+\'.py\',info[0]) for lang,info\n                        in read_possible_languages(apath(app, r=request)).iteritems()\n                        if info[2]!=0]) # info[2] is langfile_mtime:\n                                        # get only existed files\n    languages = sorted(all_languages)\n\n    plural_rules = {}\n    all_plurals = PLURAL_RULES\n    for langfile,lang in all_languages.iteritems():\n        lang=lang.strip()\n        match_language = regex_language.match(lang)\n        if match_language:\n            match_language = tuple(part\n                                   for part in match_language.groups()\n                                   if part)\n            plang = lang_sampling(match_language, all_plurals.keys())\n            if plang:\n               plural=all_plurals[plang]\n               plural_rules[langfile]=(plural[0],plang,plural[4],plural[3])\n            else:\n               plural_rules[langfile]=(0,lang,\'plural_rules-%s.py\'%lang,\'\')\n\n    plurals = listdir(apath(\'%s/languages/\' % app, r=request),\n                      \'^plural-[\\w-]+\\.py$\')\n\n    #Get crontab\n    cronfolder = apath(\'%s/cron\' % app, r=request)\n    if not os.path.exists(cronfolder): os.mkdir(cronfolder)\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    plugins=[]\n    def filter_plugins(items,plugins):\n        plugins+=[item[7:].split(\'/\')[0].split(\'.\')[0] for item in items if item.startswith(\'plugin_\')]\n        plugins[:]=list(set(plugins))\n        plugins.sort()\n        return [item for item in items if not item.startswith(\'plugin_\')]\n\n    return dict(app=app,\n                models=filter_plugins(models,plugins),\n                defines=defines,\n                controllers=filter_plugins(controllers,plugins),\n                functions=functions,\n                views=filter_plugins(views,plugins),\n                modules=filter_plugins(modules,plugins),\n                extend=extend,\n                include=include,\n                privates=filter_plugins(privates,plugins),\n                statics=filter_plugins(statics,plugins),\n                languages=languages,\n                plurals=plurals,\n                plural_rules=plural_rules,\n                crontab=crontab,\n                plugins=plugins)\n\ndef delete_plugin():\n    """ Object delete handler """\n    app=request.args(0)\n    plugin = request.args(1)\n    plugin_name=\'plugin_\'+plugin\n\n    dialog = FORM.confirm(\n        T(\'Delete\'),\n        {T(\'Cancel\'):URL(\'design\', args=app)})\n\n    if dialog.accepted:\n        try:\n            for folder in [\'models\',\'views\',\'controllers\',\'static\',\'modules\', \'private\']:\n                path=os.path.join(apath(app,r=request),folder)\n                for item in os.listdir(path):\n                    if item.rsplit(\'.\',1)[0] == plugin_name:\n                        filename=os.path.join(path,item)\n                        if os.path.isdir(filename):\n                            shutil.rmtree(filename)\n                        else:\n                            os.unlink(filename)\n            session.flash = T(\'plugin "%(plugin)s" deleted\',\n                              dict(plugin=plugin))\n        except Exception:\n            session.flash = T(\'unable to delete file plugin "%(plugin)s"\',\n                              dict(plugin=plugin))\n        redirect(URL(\'design\', args=request.args(0), anchor=request.vars.id2))\n    return dict(dialog=dialog,plugin=plugin)\n\ndef plugin():\n    """ Application design handler """\n    app = get_app()\n    plugin = request.args(1)\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+\\.\\w+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all private files\n    privates = listdir(apath(\'%s/private/\' % app, r=request), \'[^\\.#].*\')\n    privates = [x.replace(\'\\\\\',\'/\') for x in privates]\n    privates.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = sorted([lang+\'.py\' for lang, info in\n                    T.get_possible_languages_info().iteritems()\n                    if info[2]!=0]) # info[2] is langfile_mtime:\n                                    # get only existed files\n\n    #Get crontab\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    def filter_plugins(items):\n        regex=re.compile(\'^plugin_\'+plugin+\'(/.*|\\..*)?$\')\n        return [item for item in items if item and regex.match(item)]\n\n    return dict(app=app,\n                models=filter_plugins(models),\n                defines=defines,\n                controllers=filter_plugins(controllers),\n                functions=functions,\n                views=filter_plugins(views),\n                modules=filter_plugins(modules),\n                extend=extend,\n                include=include,\n                privates=filter_plugins(privates),\n                statics=filter_plugins(statics),\n                languages=languages,\n                crontab=crontab)\n\n\ndef create_file():\n    """ Create files handler """\n    if request.vars and not request.vars.token==session.token:\n        redirect(URL(\'logout\'))\n    try:\n        anchor=\'#\'+request.vars.id if request.vars.id else \'\'\n        if request.vars.app:\n            app = get_app(request.vars.app)\n            path = abspath(request.vars.location)\n        else:\n            app = get_app(name=request.vars.location.split(\'/\')[0])\n            path = apath(request.vars.location, r=request)\n        filename = re.sub(\'[^\\w./-]+\', \'_\', request.vars.filename)\n        if path[-7:] == \'/rules/\':\n            # Handle plural rules files\n            if len(filename) == 0:\n                raise SyntaxError\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n            lang = re.match(\'^plural_rules-(.*)\\.py$\',filename).group(1)\n            langinfo = read_possible_languages(apath(app, r=request))[lang]\n            text = dedent("""\n                   #!/usr/bin/env python\n                   # -*- coding: utf8 -*-\n                   # Plural-Forms for %(lang)s (%(langname)s)\n\n                   nplurals=2  # for example, English language has 2 forms:\n                               # 1 singular and 1 plural\n\n                   # Determine plural_id for number *n* as sequence of positive\n                   # integers: 0,1,...\n                   # NOTE! For singular form ALWAYS return plural_id = 0\n                   get_plural_id = lambda n: int(n != 1)\n\n                   # Construct and return plural form of *word* using\n                   # *plural_id* (which ALWAYS>0). This function will be executed\n                   # for words (or phrases) not found in plural_dict dictionary.\n                   # By default this function simply returns word in singular:\n                   construct_plural_form = lambda word, plural_id: word\n                   """)[1:] % dict(lang=langinfo[0], langname=langinfo[1])\n\n        elif path[-11:] == \'/languages/\':\n            # Handle language files\n            if len(filename) == 0:\n                raise SyntaxError\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n            path=os.path.join(apath(app, r=request),\'languages\',filename)\n            if not os.path.exists(path):\n                safe_write(path, \'\')\n            # create language xx[-yy].py file:\n            findT(apath(app, r=request), filename[:-3])\n            session.flash = T(\'language file "%(filename)s" created/updated\',\n                               dict(filename=filename))\n            redirect(request.vars.sender+anchor)\n\n        elif path[-8:] == \'/models/\':\n            # Handle python models\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n\'\n\n        elif path[-13:] == \'/controllers/\':\n            # Handle python controllers\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n# %s\\ndef index(): return dict(message="hello from %s")\'\n            text = text % (T(\'try something like\'), filename)\n\n        elif path[-7:] == \'/views/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle template (html) views\n            if filename.find(\'.\')<0:\n                filename += \'.html\'\n            extension = filename.split(\'.\')[-1].lower()\n\n            if len(filename) == 5:\n                raise SyntaxError\n\n            msg = T(\'This is the %(filename)s template\', dict(filename=filename))\n            if extension == \'html\':\n                text = dedent("""\n                   {{extend \'layout.html\'}}\n                   <h1>%s</h1>\n                   {{=BEAUTIFY(response._vars)}}""" % msg)[1:]\n            else:\n                generic = os.path.join(path,\'generic.\'+extension)\n                if os.path.exists(generic):\n                    text = read_file(generic)\n                else:\n                    text = \'\'\n\n        elif path[-9:] == \'/modules/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle python module files\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = dedent("""\n                   #!/usr/bin/env python\n                   # coding: utf8\n                   from gluon import *\\n""")[1:]\n\n        elif (path[-8:] == \'/static/\') or (path[-9:] == \'/private/\'):\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            text = \'\'\n            \n        else:\n            redirect(request.vars.sender+anchor)\n\n        full_filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(full_filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        if os.path.exists(full_filename):\n            raise SyntaxError\n\n        safe_write(full_filename, text)\n        log_progress(app,\'CREATE\',filename)\n        session.flash = T(\'file "%(filename)s" created\',\n                          dict(filename=full_filename[len(path):]))\n        vars={}\n        if request.vars.id: vars[\'id\']=request.vars.id\n        if request.vars.app: vars[\'app\']=request.vars.app\n        redirect(URL(\'edit\',\n                 args=[os.path.join(request.vars.location, filename)], vars=vars))\n    except Exception, e:\n        if not isinstance(e,HTTP):\n            session.flash = T(\'cannot create file\')\n\n    redirect(request.vars.sender+anchor)\n\n\ndef upload_file():\n    """ File uploading handler """\n    if request.vars and not request.vars.token==session.token:\n        redirect(URL(\'logout\'))\n    try:\n        filename = None\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n\n        if request.vars.filename:\n            filename = re.sub(\'[^\\w\\./]+\', \'_\', request.vars.filename)\n        else:\n            filename = os.path.split(request.vars.file.filename)[-1]\n\n        if path[-8:] == \'/models/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-9:] == \'/modules/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-13:] == \'/controllers/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-7:] == \'/views/\' and not filename[-5:] == \'.html\':\n            filename += \'.html\'\n\n        if path[-11:] == \'/languages/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        data = request.vars.file.file.read()\n        lineno = count_lines(data)\n        safe_write(filename, data, \'wb\')\n        log_progress(app,\'UPLOAD\',filename,lineno)\n        session.flash = T(\'file "%(filename)s" uploaded\',\n                          dict(filename=filename[len(path):]))\n    except Exception:\n        if filename:\n            d = dict(filename = filename[len(path):])\n        else:\n            d = dict(filename = \'unkown\')\n        session.flash = T(\'cannot upload file "%(filename)s"\', d)\n\n    redirect(request.vars.sender)\n\n\ndef errors():\n    """ Error handler """\n    import operator\n    import os\n    import pickle\n    import hashlib\n\n    app = get_app()\n\n    method = request.args(1) or \'new\'\n    db_ready = {}\n    db_ready[\'status\'] = get_ticket_storage(app)\n    db_ready[\'errmessage\'] = T("No ticket_storage.txt found under /private folder")\n    db_ready[\'errlink\'] = "http://web2py.com/books/default/chapter/29/13#Collecting-tickets"\n\n    if method == \'new\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in listdir(errors_path, \'^[a-fA-F0-9.\\-]+$\'):\n            fullpath = os.path.join(errors_path, fn)\n            if not os.path.isfile(fullpath): continue\n            try:\n                fullpath_file = open(fullpath, \'r\')\n                try:\n                    error = pickle.load(fullpath_file)\n                finally:\n                    fullpath_file.close()\n            except IOError:\n                continue\n            except EOFError:\n                continue\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                os.unlink(fullpath)\n            else:\n                try:\n                    hash2error[hash][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method, db_ready=db_ready)\n\n\n    elif method == \'dbnew\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n        tk_db, tk_table = get_ticket_storage(app)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in tk_db(tk_table.id>0).select():\n            try:\n                error = pickle.loads(fn.ticket_data)\n            except AttributeError:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n            else:\n                try:\n                    hash2error[\'hash\'][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn.ticket_id)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method)\n\n    elif method == \'dbold\':\n        tk_db, tk_table = get_ticket_storage(app)\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                tk_db(tk_table.ticket_id == item[7:]).delete()\n                tk_db.commit()\n        tickets_ = tk_db(tk_table.id>0).select(tk_table.ticket_id, tk_table.created_datetime, orderby=~tk_table.created_datetime)\n        tickets = [row.ticket_id for row in tickets_]\n        times = dict([(row.ticket_id, row.created_datetime) for row in tickets_])\n\n        return dict(app=app, tickets=tickets, method=method, times=times)\n\n    else:\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                os.unlink(apath(\'%s/errors/%s\' % (app, item[7:]), r=request))\n        func = lambda p: os.stat(apath(\'%s/errors/%s\' % \\\n                                           (app, p), r=request)).st_mtime\n        tickets = sorted(listdir(apath(\'%s/errors/\' % app, r=request), \'^\\w.*\'),\n                         key=func,\n                         reverse=True)\n\n        return dict(app=app, tickets=tickets, method=method, db_ready=db_ready)\n\ndef get_ticket_storage(app):\n    private_folder = apath(\'%s/private\' % app, r=request)\n    ticket_file = os.path.join(private_folder, \'ticket_storage.txt\')\n    if os.path.exists(ticket_file):\n        db_string = open(ticket_file).read()\n        db_string = db_string.strip().replace(\'\\r\',\'\').replace(\'\\n\',\'\')\n    else:\n        return False\n    tickets_table = \'web2py_ticket\'\n    tablename = tickets_table + \'_\' + app\n    db_path = apath(\'%s/databases\' % app, r=request)\n    ticketsdb = DAL(db_string, folder=db_path, auto_import=True)\n    if not ticketsdb.get(tablename):\n        table = ticketsdb.define_table(\n                tablename,\n                Field(\'ticket_id\', length=100),\n                Field(\'ticket_data\', \'text\'),\n                Field(\'created_datetime\', \'datetime\'),\n                )\n    return ticketsdb , ticketsdb.get(tablename)\n\ndef make_link(path):\n    """ Create a link from a path """\n    tryFile = path.replace(\'\\\\\', \'/\')\n\n    if os.path.isabs(tryFile) and os.path.isfile(tryFile):\n        (folder, filename) = os.path.split(tryFile)\n        (base, ext) = os.path.splitext(filename)\n        app = get_app()\n\n        editable = {\'controllers\': \'.py\', \'models\': \'.py\', \'views\': \'.html\'}\n        for key in editable.keys():\n            check_extension = folder.endswith("%s/%s" % (app,key))\n            if ext.lower() == editable[key] and check_extension:\n                return A(\'"\' + tryFile + \'"\',\n                         _href=URL(r=request,\n                         f=\'edit/%s/%s/%s\' % (app, key, filename))).xml()\n    return \'\'\n\n\ndef make_links(traceback):\n    """ Make links using the given traceback """\n\n    lwords = traceback.split(\'"\')\n\n    # Making the short circuit compatible with <= python2.4\n    result = (len(lwords) != 0) and lwords[0] or \'\'\n\n    i = 1\n\n    while i < len(lwords):\n        link = make_link(lwords[i])\n\n        if link == \'\':\n            result += \'"\' + lwords[i]\n        else:\n            result += link\n\n            if i + 1 < len(lwords):\n                result += lwords[i + 1]\n                i = i + 1\n\n        i = i + 1\n\n    return result\n\n\nclass TRACEBACK(object):\n    """ Generate the traceback """\n\n    def __init__(self, text):\n        """ TRACEBACK constructor """\n\n        self.s = make_links(CODE(text).xml())\n\n    def xml(self):\n        """ Returns the xml """\n\n        return self.s\n\n\ndef ticket():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    e.load(request, app, ticket)\n\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef ticketdb():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    request.tickets_db = get_ticket_storage(app)[0]\n    e.load(request, app, ticket)\n    response.view = \'default/ticket.html\'\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef error():\n    """ Generate a ticket (for testing) """\n    raise RuntimeError(\'admin ticket generator at your service\')\n\ndef update_languages():\n    """ Update available languages """\n\n    app = get_app()\n    update_all_languages(apath(app, r=request))\n    session.flash = T(\'Language files (static strings) updated\')\n    redirect(URL(\'design\',args=app,anchor=\'languages\'))\n\n\ndef twitter():\n    session.forget()\n    session._unlock(response)\n    import gluon.tools\n    import gluon.contrib.simplejson as sj\n    try:\n        if TWITTER_HASH:\n            page = urllib.urlopen("http://search.twitter.com/search.json?q=%%40%s" % TWITTER_HASH).read()\n            data = sj.loads(page, encoding="utf-8")[\'results\']\n            d = dict()\n            for e in data:\n                d[e["id"]] = e\n            r = reversed(sorted(d))\n            return dict(tweets = [d[k] for k in r])\n        else:\n            return \'disabled\'\n    except Exception, e:\n        return DIV(T(\'Unable to download because:\'),BR(),str(e))\n\n\ndef user():\n    if MULTI_USER_MODE:\n        if not db(db.auth_user).count():\n            auth.settings.registration_requires_approval = False\n        return dict(form=auth())\n    else:\n        return dict(form=T("Disabled"))\n\ndef reload_routes():\n    """ Reload routes.py """\n    import gluon.rewrite\n    gluon.rewrite.load()\n    redirect(URL(\'site\'))\n\ndef manage_students():\n    if not (MULTI_USER_MODE and is_manager()):\n        session.flash = T(\'Not Authorized\')\n        redirect(URL(\'site\'))\n    db.auth_user.registration_key.writable = True\n    grid = SQLFORM.grid(db.auth_user)\n    return locals()\n\ndef bulk_register():\n    if not (MULTI_USER_MODE and is_manager()):\n        session.flash = T(\'Not Authorized\')\n        redirect(URL(\'site\'))\n    form = SQLFORM.factory(Field(\'emails\',\'text\'))\n    if form.process().accepted:\n        emails = [x.strip() for x in form.vars.emails.split(\'\\n\') if x.strip()]\n        n = 0\n        for email in emails:\n            if not db.auth_user(email=email):\n                n += db.auth_user.insert(email = email) and 1 or 0\n        session.flash = T(\'%s students registered\',n)\n        redirect(URL(\'site\'))\n    return locals()\n\n### Begin experimental stuff need fixes:\n# 1) should run in its own process - cannot os.chdir\n# 2) should not prompt user at console\n# 3) should give option to force commit and not reuqire manual merge\n\ndef git_pull():\n    """ Git Pull handler """\n    app = get_app()\n    if not have_git:\n        session.flash = GIT_MISSING\n        redirect(URL(\'site\'))\n    dialog = FORM.confirm(T(\'Pull\'),\n                         {T(\'Cancel\'):URL(\'site\')})    \n    if dialog.accepted:\n        try:\n            repo = Repo(os.path.join(apath(r=request),app))\n            origin = repo.remotes.origin\n            origin.fetch()\n            origin.pull()\n            session.flash = T("Application updated via git pull")\n            redirect(URL(\'site\'))\n        except CheckoutError, message:\n            logging.error(message)\n            session.flash = T("Pull failed, certain files could not be checked out. Check logs for details.")\n            redirect(URL(\'site\'))\n        except UnmergedEntriesError:\n            session.flash = T("Pull is not possible because you have unmerged files. Fix them up in the work tree, and then try again.")\n            redirect(URL(\'site\'))\n        except AssertionError:\n            session.flash = T("Pull is not possible because you have unmerged files. Fix them up in the work tree, and then try again.")\n            redirect(URL(\'site\'))\n        except GitCommandError, status:\n            logging.error(str(status))\n            session.flash = T("Pull failed, git exited abnormally. See logs for details.")\n            redirect(URL(\'site\'))\n        except Exception,e:\n            logging.error("Unexpected error:", sys.exc_info()[0])\n            session.flash = T("Pull failed, git exited abnormally. See logs for details.")\n            redirect(URL(\'site\'))\n    elif \'cancel\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict(app=app,dialog=dialog)\n\n\ndef git_push():\n    """ Git Push handler """\n    app = get_app()\n    if not have_git:\n        session.flash = GIT_MISSING\n        redirect(URL(\'site\'))\n    form = SQLFORM.factory(Field(\'changelog\',requires=IS_NOT_EMPTY()))\n    form.element(\'input[type=submit]\')[\'_value\']=T(\'Push\')\n    form.add_button(T(\'Cancel\'),URL(\'site\'))\n    form.process()\n    if form.accepted:\n        try:\n            repo = Repo(os.path.join(apath(r=request),app))\n            index = repo.index\n            index.add([apath(r=request)+app+\'/*\'])\n            new_commit = index.commit(form.vars.changelog)\n            origin = repo.remotes.origin\n            origin.push()\n            session.flash = T("Git repo updated with latest application changes.")\n            redirect(URL(\'site\'))\n        except UnmergedEntriesError:\n            session.flash = T("Push failed, there are unmerged entries in the cache. Resolve merge issues manually and try again.")\n            redirect(URL(\'site\'))\n        except Exception, e:\n            logging.error("Unexpected error:", sys.exc_info()[0])\n            session.flash = T("Push failed, git exited abnormally. See logs for details.")\n            redirect(URL(\'site\'))\n    return dict(app=app,form=form)\n\n\nresponse._vars=response._caller(design)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__getslice__'
p12
S"<method-wrapper '__getslice__' of exceptions.OSError object>"
p13
sS'__str__'
p14
S"<method-wrapper '__str__' of exceptions.OSError object>"
p15
sS'__reduce__'
p16
S'<built-in method __reduce__ of exceptions.OSError object>'
p17
sS'__dict__'
p18
S'{}'
p19
sS'__sizeof__'
p20
S'<built-in method __sizeof__ of exceptions.OSError object>'
p21
sS'__init__'
p22
S"<method-wrapper '__init__' of exceptions.OSError object>"
p23
sS'__setattr__'
p24
S"<method-wrapper '__setattr__' of exceptions.OSError object>"
p25
sS'__reduce_ex__'
p26
S'<built-in method __reduce_ex__ of exceptions.OSError object>'
p27
sS'__new__'
p28
S'<built-in method __new__ of type object>'
p29
sS'errno'
p30
S'2'
sS'__format__'
p31
S'<built-in method __format__ of exceptions.OSError object>'
p32
sS'__class__'
p33
S"<type 'exceptions.OSError'>"
p34
sS'filename'
p35
S"'/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/taship1/languages'"
p36
sS'__doc__'
p37
S"'OS system call failed.'"
p38
sS'__getitem__'
p39
S"<method-wrapper '__getitem__' of exceptions.OSError object>"
p40
sS'__setstate__'
p41
S'<built-in method __setstate__ of exceptions.OSError object>'
p42
sS'__getattribute__'
p43
S"<method-wrapper '__getattribute__' of exceptions.OSError object>"
p44
sS'args'
p45
S"(2, 'No such file or directory')"
p46
sS'__subclasshook__'
p47
S'<built-in method __subclasshook__ of type object>'
p48
sS'__unicode__'
p49
S'<built-in method __unicode__ of exceptions.OSError object>'
p50
sS'strerror'
p51
S"'No such file or directory'"
p52
sS'__delattr__'
p53
S"<method-wrapper '__delattr__' of exceptions.OSError object>"
p54
sS'__repr__'
p55
S"<method-wrapper '__repr__' of exceptions.OSError object>"
p56
sS'__hash__'
p57
S"<method-wrapper '__hash__' of exceptions.OSError object>"
p58
ssS'evalue'
p59
S"[Errno 2] No such file or directory: '/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/taship1/languages'"
p60
sS'request'
p61
ccopy_reg
_reconstructor
p62
(cgluon.html
BEAUTIFY
p63
c__builtin__
object
p64
NtRp65
(dp66
S'attributes'
p67
(dp68
sS'components'
p69
(lp70
g62
(cgluon.html
TABLE
p71
g64
NtRp72
(dp73
g67
(dp74
S'level'
p75
I5
ssS'parent'
p76
Nsg69
(lp77
g62
(cgluon.html
TR
p78
g64
NtRp79
(dp80
g67
(dp81
sg76
g72
sg69
(lp82
g62
(cgluon.html
TD
p83
g64
NtRp84
(dp85
g67
(dp86
S'_style'
p87
S'font-weight:bold;vertical-align:top'
p88
ssg76
g79
sg69
(lp89
S'ajax'
p90
asbag62
(g83
g64
NtRp91
(dp92
g67
(dp93
S'_valign'
p94
S'top'
p95
ssg76
g79
sg69
(lp96
S':'
asbag62
(g83
g64
NtRp97
(dp98
g67
(dp99
sg76
g79
sg69
(lp100
g62
(g63
g64
NtRp101
(dp102
g67
(dp103
g75
I5
ssg76
g97
sg69
(lp104
S'False'
p105
asbasbasbag62
(g78
g64
NtRp106
(dp107
g67
(dp108
sg76
g72
sg69
(lp109
g62
(g83
g64
NtRp110
(dp111
g67
(dp112
g87
g88
ssg76
g106
sg69
(lp113
S'application'
p114
asbag62
(g83
g64
NtRp115
(dp116
g67
(dp117
g94
g95
ssg76
g106
sg69
(lp118
S':'
asbag62
(g83
g64
NtRp119
(dp120
g67
(dp121
sg76
g106
sg69
(lp122
g62
(g63
g64
NtRp123
(dp124
g67
(dp125
g75
I5
ssg76
g119
sg69
(lp126
S'admin'
p127
asbasbasbag62
(g78
g64
NtRp128
(dp129
g67
(dp130
sg76
g72
sg69
(lp131
g62
(g83
g64
NtRp132
(dp133
g67
(dp134
g87
g88
ssg76
g128
sg69
(lp135
g45
asbag62
(g83
g64
NtRp136
(dp137
g67
(dp138
g94
g95
ssg76
g128
sg69
(lp139
S':'
asbag62
(g83
g64
NtRp140
(dp141
g67
(dp142
sg76
g128
sg69
(lp143
g62
(g63
g64
NtRp144
(dp145
g67
(dp146
g75
I5
ssg76
g140
sg69
(lp147
g62
(g71
g64
NtRp148
(dp149
g67
(dp150
g75
I4
ssg76
Nsg69
(lp151
g62
(g78
g64
NtRp152
(dp153
g67
(dp154
sg76
g148
sg69
(lp155
g62
(g83
g64
NtRp156
(dp157
g67
(dp158
sg76
g152
sg69
(lp159
g62
(g63
g64
NtRp160
(dp161
g67
(dp162
g75
I4
ssg76
g156
sg69
(lp163
S'taship1'
p164
asbasbasbasbasbasbasbag62
(g78
g64
NtRp165
(dp166
g67
(dp167
sg76
g72
sg69
(lp168
g62
(g83
g64
NtRp169
(dp170
g67
(dp171
g87
g88
ssg76
g165
sg69
(lp172
S'body'
p173
asbag62
(g83
g64
NtRp174
(dp175
g67
(dp176
g94
g95
ssg76
g165
sg69
(lp177
S':'
asbag62
(g83
g64
NtRp178
(dp179
g67
(dp180
sg76
g165
sg69
(lp181
g62
(g63
g64
NtRp182
(dp183
g67
(dp184
g75
I5
ssg76
g178
sg69
(lp185
S'<cStringIO.StringO object at 0x7fd9a02823b0>'
p186
asbasbasbag62
(g78
g64
NtRp187
(dp188
g67
(dp189
sg76
g72
sg69
(lp190
g62
(g83
g64
NtRp191
(dp192
g67
(dp193
g87
g88
ssg76
g187
sg69
(lp194
S'cid'
p195
asbag62
(g83
g64
NtRp196
(dp197
g67
(dp198
g94
g95
ssg76
g187
sg69
(lp199
S':'
asbag62
(g83
g64
NtRp200
(dp201
g67
(dp202
sg76
g187
sg69
(lp203
g62
(g63
g64
NtRp204
(dp205
g67
(dp206
g75
I5
ssg76
g200
sg69
(lp207
S'None'
p208
asbasbasbag62
(g78
g64
NtRp209
(dp210
g67
(dp211
sg76
g72
sg69
(lp212
g62
(g83
g64
NtRp213
(dp214
g67
(dp215
g87
g88
ssg76
g209
sg69
(lp216
S'client'
p217
asbag62
(g83
g64
NtRp218
(dp219
g67
(dp220
g94
g95
ssg76
g209
sg69
(lp221
S':'
asbag62
(g83
g64
NtRp222
(dp223
g67
(dp224
sg76
g209
sg69
(lp225
g62
(g63
g64
NtRp226
(dp227
g67
(dp228
g75
I5
ssg76
g222
sg69
(lp229
S'127.0.0.1'
p230
asbasbasbag62
(g78
g64
NtRp231
(dp232
g67
(dp233
sg76
g72
sg69
(lp234
g62
(g83
g64
NtRp235
(dp236
g67
(dp237
g87
g88
ssg76
g231
sg69
(lp238
S'controller'
p239
asbag62
(g83
g64
NtRp240
(dp241
g67
(dp242
g94
g95
ssg76
g231
sg69
(lp243
S':'
asbag62
(g83
g64
NtRp244
(dp245
g67
(dp246
sg76
g231
sg69
(lp247
g62
(g63
g64
NtRp248
(dp249
g67
(dp250
g75
I5
ssg76
g244
sg69
(lp251
S'default'
p252
asbasbasbag62
(g78
g64
NtRp253
(dp254
g67
(dp255
sg76
g72
sg69
(lp256
g62
(g83
g64
NtRp257
(dp258
g67
(dp259
g87
g88
ssg76
g253
sg69
(lp260
S'cookies'
p261
asbag62
(g83
g64
NtRp262
(dp263
g67
(dp264
g94
g95
ssg76
g253
sg69
(lp265
S':'
asbag62
(g83
g64
NtRp266
(dp267
g67
(dp268
sg76
g253
sg69
(lp269
g62
(g63
g64
NtRp270
(dp271
g67
(dp272
g75
I5
ssg76
g266
sg69
(lp273
g62
(g71
g64
NtRp274
(dp275
g67
(dp276
g75
I4
ssg76
Nsg69
(lp277
g62
(g78
g64
NtRp278
(dp279
g67
(dp280
sg76
g274
sg69
(lp281
g62
(g83
g64
NtRp282
(dp283
g67
(dp284
g87
g88
ssg76
g278
sg69
(lp285
S'session_id_admin'
p286
asbag62
(g83
g64
NtRp287
(dp288
g67
(dp289
g94
g95
ssg76
g278
sg69
(lp290
S':'
asbag62
(g83
g64
NtRp291
(dp292
g67
(dp293
sg76
g278
sg69
(lp294
g62
(g63
g64
NtRp295
(dp296
g67
(dp297
g75
I4
ssg76
g291
sg69
(lp298
S'127.0.0.1-c1d41aae-308e-4c05-973c-3c5b3bef2473'
p299
ag62
(g71
g64
NtRp300
(dp301
g67
(dp302
g75
I3
ssg76
Nsg69
(lp303
g62
(g78
g64
NtRp304
(dp305
g67
(dp306
sg76
g300
sg69
(lp307
g62
(g83
g64
NtRp308
(dp309
g67
(dp310
g87
g88
ssg76
g304
sg69
(lp311
S'comment'
p312
asbag62
(g83
g64
NtRp313
(dp314
g67
(dp315
g94
g95
ssg76
g304
sg69
(lp316
S':'
asbag62
(g83
g64
NtRp317
(dp318
g67
(dp319
sg76
g304
sg69
(lp320
g62
(g63
g64
NtRp321
(dp322
g67
(dp323
g75
I3
ssg76
g317
sg69
(lp324
S''
asbasbasbag62
(g78
g64
NtRp325
(dp326
g67
(dp327
sg76
g300
sg69
(lp328
g62
(g83
g64
NtRp329
(dp330
g67
(dp331
g87
g88
ssg76
g325
sg69
(lp332
S'domain'
p333
asbag62
(g83
g64
NtRp334
(dp335
g67
(dp336
g94
g95
ssg76
g325
sg69
(lp337
S':'
asbag62
(g83
g64
NtRp338
(dp339
g67
(dp340
sg76
g325
sg69
(lp341
g62
(g63
g64
NtRp342
(dp343
g67
(dp344
g75
I3
ssg76
g338
sg69
(lp345
S''
asbasbasbag62
(g78
g64
NtRp346
(dp347
g67
(dp348
sg76
g300
sg69
(lp349
g62
(g83
g64
NtRp350
(dp351
g67
(dp352
g87
g88
ssg76
g346
sg69
(lp353
S'expires'
p354
asbag62
(g83
g64
NtRp355
(dp356
g67
(dp357
g94
g95
ssg76
g346
sg69
(lp358
S':'
asbag62
(g83
g64
NtRp359
(dp360
g67
(dp361
sg76
g346
sg69
(lp362
g62
(g63
g64
NtRp363
(dp364
g67
(dp365
g75
I3
ssg76
g359
sg69
(lp366
S''
asbasbasbag62
(g78
g64
NtRp367
(dp368
g67
(dp369
sg76
g300
sg69
(lp370
g62
(g83
g64
NtRp371
(dp372
g67
(dp373
g87
g88
ssg76
g367
sg69
(lp374
S'httponly'
p375
asbag62
(g83
g64
NtRp376
(dp377
g67
(dp378
g94
g95
ssg76
g367
sg69
(lp379
S':'
asbag62
(g83
g64
NtRp380
(dp381
g67
(dp382
sg76
g367
sg69
(lp383
g62
(g63
g64
NtRp384
(dp385
g67
(dp386
g75
I3
ssg76
g380
sg69
(lp387
S''
asbasbasbag62
(g78
g64
NtRp388
(dp389
g67
(dp390
sg76
g300
sg69
(lp391
g62
(g83
g64
NtRp392
(dp393
g67
(dp394
g87
g88
ssg76
g388
sg69
(lp395
S'max-age'
p396
asbag62
(g83
g64
NtRp397
(dp398
g67
(dp399
g94
g95
ssg76
g388
sg69
(lp400
S':'
asbag62
(g83
g64
NtRp401
(dp402
g67
(dp403
sg76
g388
sg69
(lp404
g62
(g63
g64
NtRp405
(dp406
g67
(dp407
g75
I3
ssg76
g401
sg69
(lp408
S''
asbasbasbag62
(g78
g64
NtRp409
(dp410
g67
(dp411
sg76
g300
sg69
(lp412
g62
(g83
g64
NtRp413
(dp414
g67
(dp415
g87
g88
ssg76
g409
sg69
(lp416
S'path'
p417
asbag62
(g83
g64
NtRp418
(dp419
g67
(dp420
g94
g95
ssg76
g409
sg69
(lp421
S':'
asbag62
(g83
g64
NtRp422
(dp423
g67
(dp424
sg76
g409
sg69
(lp425
g62
(g63
g64
NtRp426
(dp427
g67
(dp428
g75
I3
ssg76
g422
sg69
(lp429
S''
asbasbasbag62
(g78
g64
NtRp430
(dp431
g67
(dp432
sg76
g300
sg69
(lp433
g62
(g83
g64
NtRp434
(dp435
g67
(dp436
g87
g88
ssg76
g430
sg69
(lp437
S'secure'
p438
asbag62
(g83
g64
NtRp439
(dp440
g67
(dp441
g94
g95
ssg76
g430
sg69
(lp442
S':'
asbag62
(g83
g64
NtRp443
(dp444
g67
(dp445
sg76
g430
sg69
(lp446
g62
(g63
g64
NtRp447
(dp448
g67
(dp449
g75
I3
ssg76
g443
sg69
(lp450
S''
asbasbasbag62
(g78
g64
NtRp451
(dp452
g67
(dp453
sg76
g300
sg69
(lp454
g62
(g83
g64
NtRp455
(dp456
g67
(dp457
g87
g88
ssg76
g451
sg69
(lp458
S'version'
p459
asbag62
(g83
g64
NtRp460
(dp461
g67
(dp462
g94
g95
ssg76
g451
sg69
(lp463
S':'
asbag62
(g83
g64
NtRp464
(dp465
g67
(dp466
sg76
g451
sg69
(lp467
g62
(g63
g64
NtRp468
(dp469
g67
(dp470
g75
I3
ssg76
g464
sg69
(lp471
S''
asbasbasbasbasbasbasbag62
(g78
g64
NtRp472
(dp473
g67
(dp474
sg76
g274
sg69
(lp475
g62
(g83
g64
NtRp476
(dp477
g67
(dp478
g87
g88
ssg76
g472
sg69
(lp479
S'session_id_taship1'
p480
asbag62
(g83
g64
NtRp481
(dp482
g67
(dp483
g94
g95
ssg76
g472
sg69
(lp484
S':'
asbag62
(g83
g64
NtRp485
(dp486
g67
(dp487
sg76
g472
sg69
(lp488
g62
(g63
g64
NtRp489
(dp490
g67
(dp491
g75
I4
ssg76
g485
sg69
(lp492
S'127.0.0.1-f55b9f1c-3965-44f0-b0dc-629e3379a070'
p493
ag62
(g71
g64
NtRp494
(dp495
g67
(dp496
g75
I3
ssg76
Nsg69
(lp497
g62
(g78
g64
NtRp498
(dp499
g67
(dp500
sg76
g494
sg69
(lp501
g62
(g83
g64
NtRp502
(dp503
g67
(dp504
g87
g88
ssg76
g498
sg69
(lp505
g312
asbag62
(g83
g64
NtRp506
(dp507
g67
(dp508
g94
g95
ssg76
g498
sg69
(lp509
S':'
asbag62
(g83
g64
NtRp510
(dp511
g67
(dp512
sg76
g498
sg69
(lp513
g62
(g63
g64
NtRp514
(dp515
g67
(dp516
g75
I3
ssg76
g510
sg69
(lp517
S''
asbasbasbag62
(g78
g64
NtRp518
(dp519
g67
(dp520
sg76
g494
sg69
(lp521
g62
(g83
g64
NtRp522
(dp523
g67
(dp524
g87
g88
ssg76
g518
sg69
(lp525
g333
asbag62
(g83
g64
NtRp526
(dp527
g67
(dp528
g94
g95
ssg76
g518
sg69
(lp529
S':'
asbag62
(g83
g64
NtRp530
(dp531
g67
(dp532
sg76
g518
sg69
(lp533
g62
(g63
g64
NtRp534
(dp535
g67
(dp536
g75
I3
ssg76
g530
sg69
(lp537
S''
asbasbasbag62
(g78
g64
NtRp538
(dp539
g67
(dp540
sg76
g494
sg69
(lp541
g62
(g83
g64
NtRp542
(dp543
g67
(dp544
g87
g88
ssg76
g538
sg69
(lp545
g354
asbag62
(g83
g64
NtRp546
(dp547
g67
(dp548
g94
g95
ssg76
g538
sg69
(lp549
S':'
asbag62
(g83
g64
NtRp550
(dp551
g67
(dp552
sg76
g538
sg69
(lp553
g62
(g63
g64
NtRp554
(dp555
g67
(dp556
g75
I3
ssg76
g550
sg69
(lp557
S''
asbasbasbag62
(g78
g64
NtRp558
(dp559
g67
(dp560
sg76
g494
sg69
(lp561
g62
(g83
g64
NtRp562
(dp563
g67
(dp564
g87
g88
ssg76
g558
sg69
(lp565
g375
asbag62
(g83
g64
NtRp566
(dp567
g67
(dp568
g94
g95
ssg76
g558
sg69
(lp569
S':'
asbag62
(g83
g64
NtRp570
(dp571
g67
(dp572
sg76
g558
sg69
(lp573
g62
(g63
g64
NtRp574
(dp575
g67
(dp576
g75
I3
ssg76
g570
sg69
(lp577
S''
asbasbasbag62
(g78
g64
NtRp578
(dp579
g67
(dp580
sg76
g494
sg69
(lp581
g62
(g83
g64
NtRp582
(dp583
g67
(dp584
g87
g88
ssg76
g578
sg69
(lp585
g396
asbag62
(g83
g64
NtRp586
(dp587
g67
(dp588
g94
g95
ssg76
g578
sg69
(lp589
S':'
asbag62
(g83
g64
NtRp590
(dp591
g67
(dp592
sg76
g578
sg69
(lp593
g62
(g63
g64
NtRp594
(dp595
g67
(dp596
g75
I3
ssg76
g590
sg69
(lp597
S''
asbasbasbag62
(g78
g64
NtRp598
(dp599
g67
(dp600
sg76
g494
sg69
(lp601
g62
(g83
g64
NtRp602
(dp603
g67
(dp604
g87
g88
ssg76
g598
sg69
(lp605
g417
asbag62
(g83
g64
NtRp606
(dp607
g67
(dp608
g94
g95
ssg76
g598
sg69
(lp609
S':'
asbag62
(g83
g64
NtRp610
(dp611
g67
(dp612
sg76
g598
sg69
(lp613
g62
(g63
g64
NtRp614
(dp615
g67
(dp616
g75
I3
ssg76
g610
sg69
(lp617
S''
asbasbasbag62
(g78
g64
NtRp618
(dp619
g67
(dp620
sg76
g494
sg69
(lp621
g62
(g83
g64
NtRp622
(dp623
g67
(dp624
g87
g88
ssg76
g618
sg69
(lp625
g438
asbag62
(g83
g64
NtRp626
(dp627
g67
(dp628
g94
g95
ssg76
g618
sg69
(lp629
S':'
asbag62
(g83
g64
NtRp630
(dp631
g67
(dp632
sg76
g618
sg69
(lp633
g62
(g63
g64
NtRp634
(dp635
g67
(dp636
g75
I3
ssg76
g630
sg69
(lp637
S''
asbasbasbag62
(g78
g64
NtRp638
(dp639
g67
(dp640
sg76
g494
sg69
(lp641
g62
(g83
g64
NtRp642
(dp643
g67
(dp644
g87
g88
ssg76
g638
sg69
(lp645
g459
asbag62
(g83
g64
NtRp646
(dp647
g67
(dp648
g94
g95
ssg76
g638
sg69
(lp649
S':'
asbag62
(g83
g64
NtRp650
(dp651
g67
(dp652
sg76
g638
sg69
(lp653
g62
(g63
g64
NtRp654
(dp655
g67
(dp656
g75
I3
ssg76
g650
sg69
(lp657
S''
asbasbasbasbasbasbasbag62
(g78
g64
NtRp658
(dp659
g67
(dp660
sg76
g274
sg69
(lp661
g62
(g83
g64
NtRp662
(dp663
g67
(dp664
g87
g88
ssg76
g658
sg69
(lp665
S'session_id_welcome'
p666
asbag62
(g83
g64
NtRp667
(dp668
g67
(dp669
g94
g95
ssg76
g658
sg69
(lp670
S':'
asbag62
(g83
g64
NtRp671
(dp672
g67
(dp673
sg76
g658
sg69
(lp674
g62
(g63
g64
NtRp675
(dp676
g67
(dp677
g75
I4
ssg76
g671
sg69
(lp678
S'127.0.0.1-64813e5a-8168-457f-9831-27e3e9d0fbd5'
p679
ag62
(g71
g64
NtRp680
(dp681
g67
(dp682
g75
I3
ssg76
Nsg69
(lp683
g62
(g78
g64
NtRp684
(dp685
g67
(dp686
sg76
g680
sg69
(lp687
g62
(g83
g64
NtRp688
(dp689
g67
(dp690
g87
g88
ssg76
g684
sg69
(lp691
g312
asbag62
(g83
g64
NtRp692
(dp693
g67
(dp694
g94
g95
ssg76
g684
sg69
(lp695
S':'
asbag62
(g83
g64
NtRp696
(dp697
g67
(dp698
sg76
g684
sg69
(lp699
g62
(g63
g64
NtRp700
(dp701
g67
(dp702
g75
I3
ssg76
g696
sg69
(lp703
S''
asbasbasbag62
(g78
g64
NtRp704
(dp705
g67
(dp706
sg76
g680
sg69
(lp707
g62
(g83
g64
NtRp708
(dp709
g67
(dp710
g87
g88
ssg76
g704
sg69
(lp711
g333
asbag62
(g83
g64
NtRp712
(dp713
g67
(dp714
g94
g95
ssg76
g704
sg69
(lp715
S':'
asbag62
(g83
g64
NtRp716
(dp717
g67
(dp718
sg76
g704
sg69
(lp719
g62
(g63
g64
NtRp720
(dp721
g67
(dp722
g75
I3
ssg76
g716
sg69
(lp723
S''
asbasbasbag62
(g78
g64
NtRp724
(dp725
g67
(dp726
sg76
g680
sg69
(lp727
g62
(g83
g64
NtRp728
(dp729
g67
(dp730
g87
g88
ssg76
g724
sg69
(lp731
g354
asbag62
(g83
g64
NtRp732
(dp733
g67
(dp734
g94
g95
ssg76
g724
sg69
(lp735
S':'
asbag62
(g83
g64
NtRp736
(dp737
g67
(dp738
sg76
g724
sg69
(lp739
g62
(g63
g64
NtRp740
(dp741
g67
(dp742
g75
I3
ssg76
g736
sg69
(lp743
S''
asbasbasbag62
(g78
g64
NtRp744
(dp745
g67
(dp746
sg76
g680
sg69
(lp747
g62
(g83
g64
NtRp748
(dp749
g67
(dp750
g87
g88
ssg76
g744
sg69
(lp751
g375
asbag62
(g83
g64
NtRp752
(dp753
g67
(dp754
g94
g95
ssg76
g744
sg69
(lp755
S':'
asbag62
(g83
g64
NtRp756
(dp757
g67
(dp758
sg76
g744
sg69
(lp759
g62
(g63
g64
NtRp760
(dp761
g67
(dp762
g75
I3
ssg76
g756
sg69
(lp763
S''
asbasbasbag62
(g78
g64
NtRp764
(dp765
g67
(dp766
sg76
g680
sg69
(lp767
g62
(g83
g64
NtRp768
(dp769
g67
(dp770
g87
g88
ssg76
g764
sg69
(lp771
g396
asbag62
(g83
g64
NtRp772
(dp773
g67
(dp774
g94
g95
ssg76
g764
sg69
(lp775
S':'
asbag62
(g83
g64
NtRp776
(dp777
g67
(dp778
sg76
g764
sg69
(lp779
g62
(g63
g64
NtRp780
(dp781
g67
(dp782
g75
I3
ssg76
g776
sg69
(lp783
S''
asbasbasbag62
(g78
g64
NtRp784
(dp785
g67
(dp786
sg76
g680
sg69
(lp787
g62
(g83
g64
NtRp788
(dp789
g67
(dp790
g87
g88
ssg76
g784
sg69
(lp791
g417
asbag62
(g83
g64
NtRp792
(dp793
g67
(dp794
g94
g95
ssg76
g784
sg69
(lp795
S':'
asbag62
(g83
g64
NtRp796
(dp797
g67
(dp798
sg76
g784
sg69
(lp799
g62
(g63
g64
NtRp800
(dp801
g67
(dp802
g75
I3
ssg76
g796
sg69
(lp803
S''
asbasbasbag62
(g78
g64
NtRp804
(dp805
g67
(dp806
sg76
g680
sg69
(lp807
g62
(g83
g64
NtRp808
(dp809
g67
(dp810
g87
g88
ssg76
g804
sg69
(lp811
g438
asbag62
(g83
g64
NtRp812
(dp813
g67
(dp814
g94
g95
ssg76
g804
sg69
(lp815
S':'
asbag62
(g83
g64
NtRp816
(dp817
g67
(dp818
sg76
g804
sg69
(lp819
g62
(g63
g64
NtRp820
(dp821
g67
(dp822
g75
I3
ssg76
g816
sg69
(lp823
S''
asbasbasbag62
(g78
g64
NtRp824
(dp825
g67
(dp826
sg76
g680
sg69
(lp827
g62
(g83
g64
NtRp828
(dp829
g67
(dp830
g87
g88
ssg76
g824
sg69
(lp831
g459
asbag62
(g83
g64
NtRp832
(dp833
g67
(dp834
g94
g95
ssg76
g824
sg69
(lp835
S':'
asbag62
(g83
g64
NtRp836
(dp837
g67
(dp838
sg76
g824
sg69
(lp839
g62
(g63
g64
NtRp840
(dp841
g67
(dp842
g75
I3
ssg76
g836
sg69
(lp843
S''
asbasbasbasbasbasbasbasbasbasbasbag62
(g78
g64
NtRp844
(dp845
g67
(dp846
sg76
g72
sg69
(lp847
g62
(g83
g64
NtRp848
(dp849
g67
(dp850
g87
g88
ssg76
g844
sg69
(lp851
S'env'
p852
asbag62
(g83
g64
NtRp853
(dp854
g67
(dp855
g94
g95
ssg76
g844
sg69
(lp856
S':'
asbag62
(g83
g64
NtRp857
(dp858
g67
(dp859
sg76
g844
sg69
(lp860
g62
(g63
g64
NtRp861
(dp862
g67
(dp863
g75
I5
ssg76
g857
sg69
(lp864
g62
(g71
g64
NtRp865
(dp866
g67
(dp867
g75
I4
ssg76
Nsg69
(lp868
g62
(g78
g64
NtRp869
(dp870
g67
(dp871
sg76
g865
sg69
(lp872
g62
(g83
g64
NtRp873
(dp874
g67
(dp875
g87
g88
ssg76
g869
sg69
(lp876
S'app_folders'
p877
asbag62
(g83
g64
NtRp878
(dp879
g67
(dp880
g94
g95
ssg76
g869
sg69
(lp881
S':'
asbag62
(g83
g64
NtRp882
(dp883
g67
(dp884
sg76
g869
sg69
(lp885
g62
(g63
g64
NtRp886
(dp887
g67
(dp888
g75
I4
ssg76
g882
sg69
(lp889
S"set(['/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/taship1/', '/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/admin/', '/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/welcome/'])"
p890
asbasbasbag62
(g78
g64
NtRp891
(dp892
g67
(dp893
sg76
g865
sg69
(lp894
g62
(g83
g64
NtRp895
(dp896
g67
(dp897
g87
g88
ssg76
g891
sg69
(lp898
S'applications_parent'
p899
asbag62
(g83
g64
NtRp900
(dp901
g67
(dp902
g94
g95
ssg76
g891
sg69
(lp903
S':'
asbag62
(g83
g64
NtRp904
(dp905
g67
(dp906
sg76
g891
sg69
(lp907
g62
(g63
g64
NtRp908
(dp909
g67
(dp910
g75
I4
ssg76
g904
sg69
(lp911
S'/home/mayank/IIIT/sem 3/SSAD&Project/web2py'
p912
asbasbasbag62
(g78
g64
NtRp913
(dp914
g67
(dp915
sg76
g865
sg69
(lp916
g62
(g83
g64
NtRp917
(dp918
g67
(dp919
g87
g88
ssg76
g913
sg69
(lp920
S'cmd_args'
p921
asbag62
(g83
g64
NtRp922
(dp923
g67
(dp924
g94
g95
ssg76
g913
sg69
(lp925
S':'
asbag62
(g83
g64
NtRp926
(dp927
g67
(dp928
sg76
g913
sg69
(lp929
g62
(g63
g64
NtRp930
(dp931
g67
(dp932
g75
I4
ssg76
g926
sg69
(lp933
g62
(g71
g64
NtRp934
(dp935
g67
(dp936
g75
I3
ssg76
Nsg69
(lp937
sbasbasbasbag62
(g78
g64
NtRp938
(dp939
g67
(dp940
sg76
g865
sg69
(lp941
g62
(g83
g64
NtRp942
(dp943
g67
(dp944
g87
g88
ssg76
g938
sg69
(lp945
S'cmd_options'
p946
asbag62
(g83
g64
NtRp947
(dp948
g67
(dp949
g94
g95
ssg76
g938
sg69
(lp950
S':'
asbag62
(g83
g64
NtRp951
(dp952
g67
(dp953
sg76
g938
sg69
(lp954
g62
(g63
g64
NtRp955
(dp956
g67
(dp957
g75
I4
ssg76
g951
sg69
(lp958
S"<Values at 0x2bf1320: {'verbose': False, 'ip': '127.0.0.1', 'with_scheduler': False, 'ips': ['127.0.1.1'], 'shutdown_timeout': 5, 'taskbar': False, 'port': 8000, 'maxthreads': None, 'softcron': False, 'server_name': 'mayank', 'bpython': False, 'nogui': False, 'nocron': False, 'extcron': False, 'run_system_tests': False, 'test': None, 'folder': '/home/mayank/IIIT/sem 3/SSAD&Project/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'debuglevel': 30, 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'scheduler_groups': None, 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False, 'pid_filename': 'httpserver.pid'}>"
p959
asbasbasbag62
(g78
g64
NtRp960
(dp961
g67
(dp962
sg76
g865
sg69
(lp963
g62
(g83
g64
NtRp964
(dp965
g67
(dp966
g87
g88
ssg76
g960
sg69
(lp967
S'db_sessions'
p968
asbag62
(g83
g64
NtRp969
(dp970
g67
(dp971
g94
g95
ssg76
g960
sg69
(lp972
S':'
asbag62
(g83
g64
NtRp973
(dp974
g67
(dp975
sg76
g960
sg69
(lp976
g62
(g63
g64
NtRp977
(dp978
g67
(dp979
g75
I4
ssg76
g973
sg69
(lp980
S'set([])'
p981
asbasbasbag62
(g78
g64
NtRp982
(dp983
g67
(dp984
sg76
g865
sg69
(lp985
g62
(g83
g64
NtRp986
(dp987
g67
(dp988
g87
g88
ssg76
g982
sg69
(lp989
S'debugging'
p990
asbag62
(g83
g64
NtRp991
(dp992
g67
(dp993
g94
g95
ssg76
g982
sg69
(lp994
S':'
asbag62
(g83
g64
NtRp995
(dp996
g67
(dp997
sg76
g982
sg69
(lp998
g62
(g63
g64
NtRp999
(dp1000
g67
(dp1001
g75
I4
ssg76
g995
sg69
(lp1002
g105
asbasbasbag62
(g78
g64
NtRp1003
(dp1004
g67
(dp1005
sg76
g865
sg69
(lp1006
g62
(g83
g64
NtRp1007
(dp1008
g67
(dp1009
g87
g88
ssg76
g1003
sg69
(lp1010
S'gluon_parent'
p1011
asbag62
(g83
g64
NtRp1012
(dp1013
g67
(dp1014
g94
g95
ssg76
g1003
sg69
(lp1015
S':'
asbag62
(g83
g64
NtRp1016
(dp1017
g67
(dp1018
sg76
g1003
sg69
(lp1019
g62
(g63
g64
NtRp1020
(dp1021
g67
(dp1022
g75
I4
ssg76
g1016
sg69
(lp1023
S'/home/mayank/IIIT/sem 3/SSAD&Project/web2py'
p1024
asbasbasbag62
(g78
g64
NtRp1025
(dp1026
g67
(dp1027
sg76
g865
sg69
(lp1028
g62
(g83
g64
NtRp1029
(dp1030
g67
(dp1031
g87
g88
ssg76
g1025
sg69
(lp1032
S'http_accept'
p1033
asbag62
(g83
g64
NtRp1034
(dp1035
g67
(dp1036
g94
g95
ssg76
g1025
sg69
(lp1037
S':'
asbag62
(g83
g64
NtRp1038
(dp1039
g67
(dp1040
sg76
g1025
sg69
(lp1041
g62
(g63
g64
NtRp1042
(dp1043
g67
(dp1044
g75
I4
ssg76
g1038
sg69
(lp1045
S'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
p1046
asbasbasbag62
(g78
g64
NtRp1047
(dp1048
g67
(dp1049
sg76
g865
sg69
(lp1050
g62
(g83
g64
NtRp1051
(dp1052
g67
(dp1053
g87
g88
ssg76
g1047
sg69
(lp1054
S'http_accept_encoding'
p1055
asbag62
(g83
g64
NtRp1056
(dp1057
g67
(dp1058
g94
g95
ssg76
g1047
sg69
(lp1059
S':'
asbag62
(g83
g64
NtRp1060
(dp1061
g67
(dp1062
sg76
g1047
sg69
(lp1063
g62
(g63
g64
NtRp1064
(dp1065
g67
(dp1066
g75
I4
ssg76
g1060
sg69
(lp1067
S'gzip, deflate'
p1068
asbasbasbag62
(g78
g64
NtRp1069
(dp1070
g67
(dp1071
sg76
g865
sg69
(lp1072
g62
(g83
g64
NtRp1073
(dp1074
g67
(dp1075
g87
g88
ssg76
g1069
sg69
(lp1076
S'http_accept_language'
p1077
asbag62
(g83
g64
NtRp1078
(dp1079
g67
(dp1080
g94
g95
ssg76
g1069
sg69
(lp1081
S':'
asbag62
(g83
g64
NtRp1082
(dp1083
g67
(dp1084
sg76
g1069
sg69
(lp1085
g62
(g63
g64
NtRp1086
(dp1087
g67
(dp1088
g75
I4
ssg76
g1082
sg69
(lp1089
S'en-US,en;q=0.5'
p1090
asbasbasbag62
(g78
g64
NtRp1091
(dp1092
g67
(dp1093
sg76
g865
sg69
(lp1094
g62
(g83
g64
NtRp1095
(dp1096
g67
(dp1097
g87
g88
ssg76
g1091
sg69
(lp1098
S'http_connection'
p1099
asbag62
(g83
g64
NtRp1100
(dp1101
g67
(dp1102
g94
g95
ssg76
g1091
sg69
(lp1103
S':'
asbag62
(g83
g64
NtRp1104
(dp1105
g67
(dp1106
sg76
g1091
sg69
(lp1107
g62
(g63
g64
NtRp1108
(dp1109
g67
(dp1110
g75
I4
ssg76
g1104
sg69
(lp1111
S'keep-alive'
p1112
asbasbasbag62
(g78
g64
NtRp1113
(dp1114
g67
(dp1115
sg76
g865
sg69
(lp1116
g62
(g83
g64
NtRp1117
(dp1118
g67
(dp1119
g87
g88
ssg76
g1113
sg69
(lp1120
S'http_cookie'
p1121
asbag62
(g83
g64
NtRp1122
(dp1123
g67
(dp1124
g94
g95
ssg76
g1113
sg69
(lp1125
S':'
asbag62
(g83
g64
NtRp1126
(dp1127
g67
(dp1128
sg76
g1113
sg69
(lp1129
g62
(g63
g64
NtRp1130
(dp1131
g67
(dp1132
g75
I4
ssg76
g1126
sg69
(lp1133
S'session_id_welcome=127.0.0.1-64813e5a-8168-457f-9831-27e3e9d0fbd5; session_id_admin=127.0.0.1-c1d41aae-308e-4c05-973c-3c5b3bef2473; session_id_taship1=127.0.0.1-f55b9f1c-3965-44f0-b0dc-629e3379a070'
p1134
asbasbasbag62
(g78
g64
NtRp1135
(dp1136
g67
(dp1137
sg76
g865
sg69
(lp1138
g62
(g83
g64
NtRp1139
(dp1140
g67
(dp1141
g87
g88
ssg76
g1135
sg69
(lp1142
S'http_host'
p1143
asbag62
(g83
g64
NtRp1144
(dp1145
g67
(dp1146
g94
g95
ssg76
g1135
sg69
(lp1147
S':'
asbag62
(g83
g64
NtRp1148
(dp1149
g67
(dp1150
sg76
g1135
sg69
(lp1151
g62
(g63
g64
NtRp1152
(dp1153
g67
(dp1154
g75
I4
ssg76
g1148
sg69
(lp1155
S'127.0.0.1:8000'
p1156
asbasbasbag62
(g78
g64
NtRp1157
(dp1158
g67
(dp1159
sg76
g865
sg69
(lp1160
g62
(g83
g64
NtRp1161
(dp1162
g67
(dp1163
g87
g88
ssg76
g1157
sg69
(lp1164
S'http_referer'
p1165
asbag62
(g83
g64
NtRp1166
(dp1167
g67
(dp1168
g94
g95
ssg76
g1157
sg69
(lp1169
S':'
asbag62
(g83
g64
NtRp1170
(dp1171
g67
(dp1172
sg76
g1157
sg69
(lp1173
g62
(g63
g64
NtRp1174
(dp1175
g67
(dp1176
g75
I4
ssg76
g1170
sg69
(lp1177
S'http://127.0.0.1:8000/admin/default/site'
p1178
asbasbasbag62
(g78
g64
NtRp1179
(dp1180
g67
(dp1181
sg76
g865
sg69
(lp1182
g62
(g83
g64
NtRp1183
(dp1184
g67
(dp1185
g87
g88
ssg76
g1179
sg69
(lp1186
S'http_user_agent'
p1187
asbag62
(g83
g64
NtRp1188
(dp1189
g67
(dp1190
g94
g95
ssg76
g1179
sg69
(lp1191
S':'
asbag62
(g83
g64
NtRp1192
(dp1193
g67
(dp1194
sg76
g1179
sg69
(lp1195
g62
(g63
g64
NtRp1196
(dp1197
g67
(dp1198
g75
I4
ssg76
g1192
sg69
(lp1199
S'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0'
p1200
asbasbasbag62
(g78
g64
NtRp1201
(dp1202
g67
(dp1203
sg76
g865
sg69
(lp1204
g62
(g83
g64
NtRp1205
(dp1206
g67
(dp1207
g87
g88
ssg76
g1201
sg69
(lp1208
S'is_jython'
p1209
asbag62
(g83
g64
NtRp1210
(dp1211
g67
(dp1212
g94
g95
ssg76
g1201
sg69
(lp1213
S':'
asbag62
(g83
g64
NtRp1214
(dp1215
g67
(dp1216
sg76
g1201
sg69
(lp1217
g62
(g63
g64
NtRp1218
(dp1219
g67
(dp1220
g75
I4
ssg76
g1214
sg69
(lp1221
g105
asbasbasbag62
(g78
g64
NtRp1222
(dp1223
g67
(dp1224
sg76
g865
sg69
(lp1225
g62
(g83
g64
NtRp1226
(dp1227
g67
(dp1228
g87
g88
ssg76
g1222
sg69
(lp1229
S'is_pypy'
p1230
asbag62
(g83
g64
NtRp1231
(dp1232
g67
(dp1233
g94
g95
ssg76
g1222
sg69
(lp1234
S':'
asbag62
(g83
g64
NtRp1235
(dp1236
g67
(dp1237
sg76
g1222
sg69
(lp1238
g62
(g63
g64
NtRp1239
(dp1240
g67
(dp1241
g75
I4
ssg76
g1235
sg69
(lp1242
g105
asbasbasbag62
(g78
g64
NtRp1243
(dp1244
g67
(dp1245
sg76
g865
sg69
(lp1246
g62
(g83
g64
NtRp1247
(dp1248
g67
(dp1249
g87
g88
ssg76
g1243
sg69
(lp1250
S'path_info'
p1251
asbag62
(g83
g64
NtRp1252
(dp1253
g67
(dp1254
g94
g95
ssg76
g1243
sg69
(lp1255
S':'
asbag62
(g83
g64
NtRp1256
(dp1257
g67
(dp1258
sg76
g1243
sg69
(lp1259
g62
(g63
g64
NtRp1260
(dp1261
g67
(dp1262
g75
I4
ssg76
g1256
sg69
(lp1263
S'/admin/default/design/taship1'
p1264
asbasbasbag62
(g78
g64
NtRp1265
(dp1266
g67
(dp1267
sg76
g865
sg69
(lp1268
g62
(g83
g64
NtRp1269
(dp1270
g67
(dp1271
g87
g88
ssg76
g1265
sg69
(lp1272
S'query_string'
p1273
asbag62
(g83
g64
NtRp1274
(dp1275
g67
(dp1276
g94
g95
ssg76
g1265
sg69
(lp1277
S':'
asbag62
(g83
g64
NtRp1278
(dp1279
g67
(dp1280
sg76
g1265
sg69
(lp1281
g62
(g63
g64
NtRp1282
(dp1283
g67
(dp1284
g75
I4
ssg76
g1278
sg69
(lp1285
S''
asbasbasbag62
(g78
g64
NtRp1286
(dp1287
g67
(dp1288
sg76
g865
sg69
(lp1289
g62
(g83
g64
NtRp1290
(dp1291
g67
(dp1292
g87
g88
ssg76
g1286
sg69
(lp1293
S'remote_addr'
p1294
asbag62
(g83
g64
NtRp1295
(dp1296
g67
(dp1297
g94
g95
ssg76
g1286
sg69
(lp1298
S':'
asbag62
(g83
g64
NtRp1299
(dp1300
g67
(dp1301
sg76
g1286
sg69
(lp1302
g62
(g63
g64
NtRp1303
(dp1304
g67
(dp1305
g75
I4
ssg76
g1299
sg69
(lp1306
g230
asbasbasbag62
(g78
g64
NtRp1307
(dp1308
g67
(dp1309
sg76
g865
sg69
(lp1310
g62
(g83
g64
NtRp1311
(dp1312
g67
(dp1313
g87
g88
ssg76
g1307
sg69
(lp1314
S'remote_port'
p1315
asbag62
(g83
g64
NtRp1316
(dp1317
g67
(dp1318
g94
g95
ssg76
g1307
sg69
(lp1319
S':'
asbag62
(g83
g64
NtRp1320
(dp1321
g67
(dp1322
sg76
g1307
sg69
(lp1323
g62
(g63
g64
NtRp1324
(dp1325
g67
(dp1326
g75
I4
ssg76
g1320
sg69
(lp1327
S'34037'
p1328
asbasbasbag62
(g78
g64
NtRp1329
(dp1330
g67
(dp1331
sg76
g865
sg69
(lp1332
g62
(g83
g64
NtRp1333
(dp1334
g67
(dp1335
g87
g88
ssg76
g1329
sg69
(lp1336
S'request_method'
p1337
asbag62
(g83
g64
NtRp1338
(dp1339
g67
(dp1340
g94
g95
ssg76
g1329
sg69
(lp1341
S':'
asbag62
(g83
g64
NtRp1342
(dp1343
g67
(dp1344
sg76
g1329
sg69
(lp1345
g62
(g63
g64
NtRp1346
(dp1347
g67
(dp1348
g75
I4
ssg76
g1342
sg69
(lp1349
S'GET'
p1350
asbasbasbag62
(g78
g64
NtRp1351
(dp1352
g67
(dp1353
sg76
g865
sg69
(lp1354
g62
(g83
g64
NtRp1355
(dp1356
g67
(dp1357
g87
g88
ssg76
g1351
sg69
(lp1358
S'request_uri'
p1359
asbag62
(g83
g64
NtRp1360
(dp1361
g67
(dp1362
g94
g95
ssg76
g1351
sg69
(lp1363
S':'
asbag62
(g83
g64
NtRp1364
(dp1365
g67
(dp1366
sg76
g1351
sg69
(lp1367
g62
(g63
g64
NtRp1368
(dp1369
g67
(dp1370
g75
I4
ssg76
g1364
sg69
(lp1371
g1264
asbasbasbag62
(g78
g64
NtRp1372
(dp1373
g67
(dp1374
sg76
g865
sg69
(lp1375
g62
(g83
g64
NtRp1376
(dp1377
g67
(dp1378
g87
g88
ssg76
g1372
sg69
(lp1379
S'script_name'
p1380
asbag62
(g83
g64
NtRp1381
(dp1382
g67
(dp1383
g94
g95
ssg76
g1372
sg69
(lp1384
S':'
asbag62
(g83
g64
NtRp1385
(dp1386
g67
(dp1387
sg76
g1372
sg69
(lp1388
g62
(g63
g64
NtRp1389
(dp1390
g67
(dp1391
g75
I4
ssg76
g1385
sg69
(lp1392
S''
asbasbasbag62
(g78
g64
NtRp1393
(dp1394
g67
(dp1395
sg76
g865
sg69
(lp1396
g62
(g83
g64
NtRp1397
(dp1398
g67
(dp1399
g87
g88
ssg76
g1393
sg69
(lp1400
S'server_name'
p1401
asbag62
(g83
g64
NtRp1402
(dp1403
g67
(dp1404
g94
g95
ssg76
g1393
sg69
(lp1405
S':'
asbag62
(g83
g64
NtRp1406
(dp1407
g67
(dp1408
sg76
g1393
sg69
(lp1409
g62
(g63
g64
NtRp1410
(dp1411
g67
(dp1412
g75
I4
ssg76
g1406
sg69
(lp1413
S'mayank'
p1414
asbasbasbag62
(g78
g64
NtRp1415
(dp1416
g67
(dp1417
sg76
g865
sg69
(lp1418
g62
(g83
g64
NtRp1419
(dp1420
g67
(dp1421
g87
g88
ssg76
g1415
sg69
(lp1422
S'server_port'
p1423
asbag62
(g83
g64
NtRp1424
(dp1425
g67
(dp1426
g94
g95
ssg76
g1415
sg69
(lp1427
S':'
asbag62
(g83
g64
NtRp1428
(dp1429
g67
(dp1430
sg76
g1415
sg69
(lp1431
g62
(g63
g64
NtRp1432
(dp1433
g67
(dp1434
g75
I4
ssg76
g1428
sg69
(lp1435
S'8000'
p1436
asbasbasbag62
(g78
g64
NtRp1437
(dp1438
g67
(dp1439
sg76
g865
sg69
(lp1440
g62
(g83
g64
NtRp1441
(dp1442
g67
(dp1443
g87
g88
ssg76
g1437
sg69
(lp1444
S'server_protocol'
p1445
asbag62
(g83
g64
NtRp1446
(dp1447
g67
(dp1448
g94
g95
ssg76
g1437
sg69
(lp1449
S':'
asbag62
(g83
g64
NtRp1450
(dp1451
g67
(dp1452
sg76
g1437
sg69
(lp1453
g62
(g63
g64
NtRp1454
(dp1455
g67
(dp1456
g75
I4
ssg76
g1450
sg69
(lp1457
S'HTTP/1.1'
p1458
asbasbasbag62
(g78
g64
NtRp1459
(dp1460
g67
(dp1461
sg76
g865
sg69
(lp1462
g62
(g83
g64
NtRp1463
(dp1464
g67
(dp1465
g87
g88
ssg76
g1459
sg69
(lp1466
S'server_software'
p1467
asbag62
(g83
g64
NtRp1468
(dp1469
g67
(dp1470
g94
g95
ssg76
g1459
sg69
(lp1471
S':'
asbag62
(g83
g64
NtRp1472
(dp1473
g67
(dp1474
sg76
g1459
sg69
(lp1475
g62
(g63
g64
NtRp1476
(dp1477
g67
(dp1478
g75
I4
ssg76
g1472
sg69
(lp1479
S'Rocket 1.2.4'
p1480
asbasbasbag62
(g78
g64
NtRp1481
(dp1482
g67
(dp1483
sg76
g865
sg69
(lp1484
g62
(g83
g64
NtRp1485
(dp1486
g67
(dp1487
g87
g88
ssg76
g1481
sg69
(lp1488
S'web2py_crontype'
p1489
asbag62
(g83
g64
NtRp1490
(dp1491
g67
(dp1492
g94
g95
ssg76
g1481
sg69
(lp1493
S':'
asbag62
(g83
g64
NtRp1494
(dp1495
g67
(dp1496
sg76
g1481
sg69
(lp1497
g62
(g63
g64
NtRp1498
(dp1499
g67
(dp1500
g75
I4
ssg76
g1494
sg69
(lp1501
S'hard'
p1502
asbasbasbag62
(g78
g64
NtRp1503
(dp1504
g67
(dp1505
sg76
g865
sg69
(lp1506
g62
(g83
g64
NtRp1507
(dp1508
g67
(dp1509
g87
g88
ssg76
g1503
sg69
(lp1510
S'web2py_path'
p1511
asbag62
(g83
g64
NtRp1512
(dp1513
g67
(dp1514
g94
g95
ssg76
g1503
sg69
(lp1515
S':'
asbag62
(g83
g64
NtRp1516
(dp1517
g67
(dp1518
sg76
g1503
sg69
(lp1519
g62
(g63
g64
NtRp1520
(dp1521
g67
(dp1522
g75
I4
ssg76
g1516
sg69
(lp1523
g912
asbasbasbag62
(g78
g64
NtRp1524
(dp1525
g67
(dp1526
sg76
g865
sg69
(lp1527
g62
(g83
g64
NtRp1528
(dp1529
g67
(dp1530
g87
g88
ssg76
g1524
sg69
(lp1531
S'web2py_version'
p1532
asbag62
(g83
g64
NtRp1533
(dp1534
g67
(dp1535
g94
g95
ssg76
g1524
sg69
(lp1536
S':'
asbag62
(g83
g64
NtRp1537
(dp1538
g67
(dp1539
sg76
g1524
sg69
(lp1540
g62
(g63
g64
NtRp1541
(dp1542
g67
(dp1543
g75
I4
ssg76
g1537
sg69
(lp1544
g62
(g71
g64
NtRp1545
(dp1546
g67
(dp1547
g75
I3
ssg76
Nsg69
(lp1548
g62
(g78
g64
NtRp1549
(dp1550
g67
(dp1551
sg76
g1545
sg69
(lp1552
g62
(g83
g64
NtRp1553
(dp1554
g67
(dp1555
sg76
g1549
sg69
(lp1556
g62
(g63
g64
NtRp1557
(dp1558
g67
(dp1559
g75
I3
ssg76
g1553
sg69
(lp1560
S'2'
asbasbasbag62
(g78
g64
NtRp1561
(dp1562
g67
(dp1563
sg76
g1545
sg69
(lp1564
g62
(g83
g64
NtRp1565
(dp1566
g67
(dp1567
sg76
g1561
sg69
(lp1568
g62
(g63
g64
NtRp1569
(dp1570
g67
(dp1571
g75
I3
ssg76
g1565
sg69
(lp1572
S'0'
asbasbasbag62
(g78
g64
NtRp1573
(dp1574
g67
(dp1575
sg76
g1545
sg69
(lp1576
g62
(g83
g64
NtRp1577
(dp1578
g67
(dp1579
sg76
g1573
sg69
(lp1580
g62
(g63
g64
NtRp1581
(dp1582
g67
(dp1583
g75
I3
ssg76
g1577
sg69
(lp1584
S'8'
asbasbasbag62
(g78
g64
NtRp1585
(dp1586
g67
(dp1587
sg76
g1545
sg69
(lp1588
g62
(g83
g64
NtRp1589
(dp1590
g67
(dp1591
sg76
g1585
sg69
(lp1592
g62
(g63
g64
NtRp1593
(dp1594
g67
(dp1595
g75
I3
ssg76
g1589
sg69
(lp1596
S'datetime.datetime(2012, 9, 7, 3, 47, 51)'
p1597
asbasbasbag62
(g78
g64
NtRp1598
(dp1599
g67
(dp1600
sg76
g1545
sg69
(lp1601
g62
(g83
g64
NtRp1602
(dp1603
g67
(dp1604
sg76
g1598
sg69
(lp1605
g62
(g63
g64
NtRp1606
(dp1607
g67
(dp1608
g75
I3
ssg76
g1602
sg69
(lp1609
S'stable'
p1610
asbasbasbasbasbasbasbag62
(g78
g64
NtRp1611
(dp1612
g67
(dp1613
sg76
g865
sg69
(lp1614
g62
(g83
g64
NtRp1615
(dp1616
g67
(dp1617
g87
g88
ssg76
g1611
sg69
(lp1618
S'wsgi_errors'
p1619
asbag62
(g83
g64
NtRp1620
(dp1621
g67
(dp1622
g94
g95
ssg76
g1611
sg69
(lp1623
S':'
asbag62
(g83
g64
NtRp1624
(dp1625
g67
(dp1626
sg76
g1611
sg69
(lp1627
g62
(g63
g64
NtRp1628
(dp1629
g67
(dp1630
g75
I4
ssg76
g1624
sg69
(lp1631
S"<open file '<stderr>', mode 'w' at 0x7fd9c3e0b270>"
p1632
asbasbasbag62
(g78
g64
NtRp1633
(dp1634
g67
(dp1635
sg76
g865
sg69
(lp1636
g62
(g83
g64
NtRp1637
(dp1638
g67
(dp1639
g87
g88
ssg76
g1633
sg69
(lp1640
S'wsgi_file_wrapper'
p1641
asbag62
(g83
g64
NtRp1642
(dp1643
g67
(dp1644
g94
g95
ssg76
g1633
sg69
(lp1645
S':'
asbag62
(g83
g64
NtRp1646
(dp1647
g67
(dp1648
sg76
g1633
sg69
(lp1649
g62
(g63
g64
NtRp1650
(dp1651
g67
(dp1652
g75
I4
ssg76
g1646
sg69
(lp1653
S'<class wsgiref.util.FileWrapper at 0x2b7e120>'
p1654
asbasbasbag62
(g78
g64
NtRp1655
(dp1656
g67
(dp1657
sg76
g865
sg69
(lp1658
g62
(g83
g64
NtRp1659
(dp1660
g67
(dp1661
g87
g88
ssg76
g1655
sg69
(lp1662
S'wsgi_input'
p1663
asbag62
(g83
g64
NtRp1664
(dp1665
g67
(dp1666
g94
g95
ssg76
g1655
sg69
(lp1667
S':'
asbag62
(g83
g64
NtRp1668
(dp1669
g67
(dp1670
sg76
g1655
sg69
(lp1671
g62
(g63
g64
NtRp1672
(dp1673
g67
(dp1674
g75
I4
ssg76
g1668
sg69
(lp1675
S'<socket._fileobject object at 0x7fd9981af7d0>'
p1676
asbasbasbag62
(g78
g64
NtRp1677
(dp1678
g67
(dp1679
sg76
g865
sg69
(lp1680
g62
(g83
g64
NtRp1681
(dp1682
g67
(dp1683
g87
g88
ssg76
g1677
sg69
(lp1684
S'wsgi_multiprocess'
p1685
asbag62
(g83
g64
NtRp1686
(dp1687
g67
(dp1688
g94
g95
ssg76
g1677
sg69
(lp1689
S':'
asbag62
(g83
g64
NtRp1690
(dp1691
g67
(dp1692
sg76
g1677
sg69
(lp1693
g62
(g63
g64
NtRp1694
(dp1695
g67
(dp1696
g75
I4
ssg76
g1690
sg69
(lp1697
g105
asbasbasbag62
(g78
g64
NtRp1698
(dp1699
g67
(dp1700
sg76
g865
sg69
(lp1701
g62
(g83
g64
NtRp1702
(dp1703
g67
(dp1704
g87
g88
ssg76
g1698
sg69
(lp1705
S'wsgi_multithread'
p1706
asbag62
(g83
g64
NtRp1707
(dp1708
g67
(dp1709
g94
g95
ssg76
g1698
sg69
(lp1710
S':'
asbag62
(g83
g64
NtRp1711
(dp1712
g67
(dp1713
sg76
g1698
sg69
(lp1714
g62
(g63
g64
NtRp1715
(dp1716
g67
(dp1717
g75
I4
ssg76
g1711
sg69
(lp1718
S'True'
p1719
asbasbasbag62
(g78
g64
NtRp1720
(dp1721
g67
(dp1722
sg76
g865
sg69
(lp1723
g62
(g83
g64
NtRp1724
(dp1725
g67
(dp1726
g87
g88
ssg76
g1720
sg69
(lp1727
S'wsgi_run_once'
p1728
asbag62
(g83
g64
NtRp1729
(dp1730
g67
(dp1731
g94
g95
ssg76
g1720
sg69
(lp1732
S':'
asbag62
(g83
g64
NtRp1733
(dp1734
g67
(dp1735
sg76
g1720
sg69
(lp1736
g62
(g63
g64
NtRp1737
(dp1738
g67
(dp1739
g75
I4
ssg76
g1733
sg69
(lp1740
g105
asbasbasbag62
(g78
g64
NtRp1741
(dp1742
g67
(dp1743
sg76
g865
sg69
(lp1744
g62
(g83
g64
NtRp1745
(dp1746
g67
(dp1747
g87
g88
ssg76
g1741
sg69
(lp1748
S'wsgi_url_scheme'
p1749
asbag62
(g83
g64
NtRp1750
(dp1751
g67
(dp1752
g94
g95
ssg76
g1741
sg69
(lp1753
S':'
asbag62
(g83
g64
NtRp1754
(dp1755
g67
(dp1756
sg76
g1741
sg69
(lp1757
g62
(g63
g64
NtRp1758
(dp1759
g67
(dp1760
g75
I4
ssg76
g1754
sg69
(lp1761
S'http'
p1762
asbasbasbag62
(g78
g64
NtRp1763
(dp1764
g67
(dp1765
sg76
g865
sg69
(lp1766
g62
(g83
g64
NtRp1767
(dp1768
g67
(dp1769
g87
g88
ssg76
g1763
sg69
(lp1770
S'wsgi_version'
p1771
asbag62
(g83
g64
NtRp1772
(dp1773
g67
(dp1774
g94
g95
ssg76
g1763
sg69
(lp1775
S':'
asbag62
(g83
g64
NtRp1776
(dp1777
g67
(dp1778
sg76
g1763
sg69
(lp1779
g62
(g63
g64
NtRp1780
(dp1781
g67
(dp1782
g75
I4
ssg76
g1776
sg69
(lp1783
g62
(g71
g64
NtRp1784
(dp1785
g67
(dp1786
g75
I3
ssg76
Nsg69
(lp1787
g62
(g78
g64
NtRp1788
(dp1789
g67
(dp1790
sg76
g1784
sg69
(lp1791
g62
(g83
g64
NtRp1792
(dp1793
g67
(dp1794
sg76
g1788
sg69
(lp1795
g62
(g63
g64
NtRp1796
(dp1797
g67
(dp1798
g75
I3
ssg76
g1792
sg69
(lp1799
S'1'
asbasbasbag62
(g78
g64
NtRp1800
(dp1801
g67
(dp1802
sg76
g1784
sg69
(lp1803
g62
(g83
g64
NtRp1804
(dp1805
g67
(dp1806
sg76
g1800
sg69
(lp1807
g62
(g63
g64
NtRp1808
(dp1809
g67
(dp1810
g75
I3
ssg76
g1804
sg69
(lp1811
S'0'
asbasbasbasbasbasbasbasbasbasbasbag62
(g78
g64
NtRp1812
(dp1813
g67
(dp1814
sg76
g72
sg69
(lp1815
g62
(g83
g64
NtRp1816
(dp1817
g67
(dp1818
g87
g88
ssg76
g1812
sg69
(lp1819
S'extension'
p1820
asbag62
(g83
g64
NtRp1821
(dp1822
g67
(dp1823
g94
g95
ssg76
g1812
sg69
(lp1824
S':'
asbag62
(g83
g64
NtRp1825
(dp1826
g67
(dp1827
sg76
g1812
sg69
(lp1828
g62
(g63
g64
NtRp1829
(dp1830
g67
(dp1831
g75
I5
ssg76
g1825
sg69
(lp1832
S'html'
p1833
asbasbasbag62
(g78
g64
NtRp1834
(dp1835
g67
(dp1836
sg76
g72
sg69
(lp1837
g62
(g83
g64
NtRp1838
(dp1839
g67
(dp1840
g87
g88
ssg76
g1834
sg69
(lp1841
S'folder'
p1842
asbag62
(g83
g64
NtRp1843
(dp1844
g67
(dp1845
g94
g95
ssg76
g1834
sg69
(lp1846
S':'
asbag62
(g83
g64
NtRp1847
(dp1848
g67
(dp1849
sg76
g1834
sg69
(lp1850
g62
(g63
g64
NtRp1851
(dp1852
g67
(dp1853
g75
I5
ssg76
g1847
sg69
(lp1854
S'/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/admin/'
p1855
asbasbasbag62
(g78
g64
NtRp1856
(dp1857
g67
(dp1858
sg76
g72
sg69
(lp1859
g62
(g83
g64
NtRp1860
(dp1861
g67
(dp1862
g87
g88
ssg76
g1856
sg69
(lp1863
S'function'
p1864
asbag62
(g83
g64
NtRp1865
(dp1866
g67
(dp1867
g94
g95
ssg76
g1856
sg69
(lp1868
S':'
asbag62
(g83
g64
NtRp1869
(dp1870
g67
(dp1871
sg76
g1856
sg69
(lp1872
g62
(g63
g64
NtRp1873
(dp1874
g67
(dp1875
g75
I5
ssg76
g1869
sg69
(lp1876
S'design'
p1877
asbasbasbag62
(g78
g64
NtRp1878
(dp1879
g67
(dp1880
sg76
g72
sg69
(lp1881
g62
(g83
g64
NtRp1882
(dp1883
g67
(dp1884
g87
g88
ssg76
g1878
sg69
(lp1885
S'get_vars'
p1886
asbag62
(g83
g64
NtRp1887
(dp1888
g67
(dp1889
g94
g95
ssg76
g1878
sg69
(lp1890
S':'
asbag62
(g83
g64
NtRp1891
(dp1892
g67
(dp1893
sg76
g1878
sg69
(lp1894
g62
(g63
g64
NtRp1895
(dp1896
g67
(dp1897
g75
I5
ssg76
g1891
sg69
(lp1898
g62
(g71
g64
NtRp1899
(dp1900
g67
(dp1901
g75
I4
ssg76
Nsg69
(lp1902
sbasbasbasbag62
(g78
g64
NtRp1903
(dp1904
g67
(dp1905
sg76
g72
sg69
(lp1906
g62
(g83
g64
NtRp1907
(dp1908
g67
(dp1909
g87
g88
ssg76
g1903
sg69
(lp1910
S'global_settings'
p1911
asbag62
(g83
g64
NtRp1912
(dp1913
g67
(dp1914
g94
g95
ssg76
g1903
sg69
(lp1915
S':'
asbag62
(g83
g64
NtRp1916
(dp1917
g67
(dp1918
sg76
g1903
sg69
(lp1919
g62
(g63
g64
NtRp1920
(dp1921
g67
(dp1922
g75
I5
ssg76
g1916
sg69
(lp1923
g62
(g71
g64
NtRp1924
(dp1925
g67
(dp1926
g75
I4
ssg76
Nsg69
(lp1927
g62
(g78
g64
NtRp1928
(dp1929
g67
(dp1930
sg76
g1924
sg69
(lp1931
g62
(g83
g64
NtRp1932
(dp1933
g67
(dp1934
g87
g88
ssg76
g1928
sg69
(lp1935
g877
asbag62
(g83
g64
NtRp1936
(dp1937
g67
(dp1938
g94
g95
ssg76
g1928
sg69
(lp1939
S':'
asbag62
(g83
g64
NtRp1940
(dp1941
g67
(dp1942
sg76
g1928
sg69
(lp1943
g62
(g63
g64
NtRp1944
(dp1945
g67
(dp1946
g75
I4
ssg76
g1940
sg69
(lp1947
S"set(['/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/taship1/', '/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/admin/', '/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/welcome/'])"
p1948
asbasbasbag62
(g78
g64
NtRp1949
(dp1950
g67
(dp1951
sg76
g1924
sg69
(lp1952
g62
(g83
g64
NtRp1953
(dp1954
g67
(dp1955
g87
g88
ssg76
g1949
sg69
(lp1956
g899
asbag62
(g83
g64
NtRp1957
(dp1958
g67
(dp1959
g94
g95
ssg76
g1949
sg69
(lp1960
S':'
asbag62
(g83
g64
NtRp1961
(dp1962
g67
(dp1963
sg76
g1949
sg69
(lp1964
g62
(g63
g64
NtRp1965
(dp1966
g67
(dp1967
g75
I4
ssg76
g1961
sg69
(lp1968
g912
asbasbasbag62
(g78
g64
NtRp1969
(dp1970
g67
(dp1971
sg76
g1924
sg69
(lp1972
g62
(g83
g64
NtRp1973
(dp1974
g67
(dp1975
g87
g88
ssg76
g1969
sg69
(lp1976
g921
asbag62
(g83
g64
NtRp1977
(dp1978
g67
(dp1979
g94
g95
ssg76
g1969
sg69
(lp1980
S':'
asbag62
(g83
g64
NtRp1981
(dp1982
g67
(dp1983
sg76
g1969
sg69
(lp1984
g62
(g63
g64
NtRp1985
(dp1986
g67
(dp1987
g75
I4
ssg76
g1981
sg69
(lp1988
g62
(g71
g64
NtRp1989
(dp1990
g67
(dp1991
g75
I3
ssg76
Nsg69
(lp1992
sbasbasbasbag62
(g78
g64
NtRp1993
(dp1994
g67
(dp1995
sg76
g1924
sg69
(lp1996
g62
(g83
g64
NtRp1997
(dp1998
g67
(dp1999
g87
g88
ssg76
g1993
sg69
(lp2000
g946
asbag62
(g83
g64
NtRp2001
(dp2002
g67
(dp2003
g94
g95
ssg76
g1993
sg69
(lp2004
S':'
asbag62
(g83
g64
NtRp2005
(dp2006
g67
(dp2007
sg76
g1993
sg69
(lp2008
g62
(g63
g64
NtRp2009
(dp2010
g67
(dp2011
g75
I4
ssg76
g2005
sg69
(lp2012
S"<Values at 0x2bf1320: {'verbose': False, 'ip': '127.0.0.1', 'with_scheduler': False, 'ips': ['127.0.1.1'], 'shutdown_timeout': 5, 'taskbar': False, 'port': 8000, 'maxthreads': None, 'softcron': False, 'server_name': 'mayank', 'bpython': False, 'nogui': False, 'nocron': False, 'extcron': False, 'run_system_tests': False, 'test': None, 'folder': '/home/mayank/IIIT/sem 3/SSAD&Project/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'debuglevel': 30, 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'scheduler_groups': None, 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False, 'pid_filename': 'httpserver.pid'}>"
p2013
asbasbasbag62
(g78
g64
NtRp2014
(dp2015
g67
(dp2016
sg76
g1924
sg69
(lp2017
g62
(g83
g64
NtRp2018
(dp2019
g67
(dp2020
g87
g88
ssg76
g2014
sg69
(lp2021
g968
asbag62
(g83
g64
NtRp2022
(dp2023
g67
(dp2024
g94
g95
ssg76
g2014
sg69
(lp2025
S':'
asbag62
(g83
g64
NtRp2026
(dp2027
g67
(dp2028
sg76
g2014
sg69
(lp2029
g62
(g63
g64
NtRp2030
(dp2031
g67
(dp2032
g75
I4
ssg76
g2026
sg69
(lp2033
S'set([])'
p2034
asbasbasbag62
(g78
g64
NtRp2035
(dp2036
g67
(dp2037
sg76
g1924
sg69
(lp2038
g62
(g83
g64
NtRp2039
(dp2040
g67
(dp2041
g87
g88
ssg76
g2035
sg69
(lp2042
g990
asbag62
(g83
g64
NtRp2043
(dp2044
g67
(dp2045
g94
g95
ssg76
g2035
sg69
(lp2046
S':'
asbag62
(g83
g64
NtRp2047
(dp2048
g67
(dp2049
sg76
g2035
sg69
(lp2050
g62
(g63
g64
NtRp2051
(dp2052
g67
(dp2053
g75
I4
ssg76
g2047
sg69
(lp2054
g105
asbasbasbag62
(g78
g64
NtRp2055
(dp2056
g67
(dp2057
sg76
g1924
sg69
(lp2058
g62
(g83
g64
NtRp2059
(dp2060
g67
(dp2061
g87
g88
ssg76
g2055
sg69
(lp2062
g1011
asbag62
(g83
g64
NtRp2063
(dp2064
g67
(dp2065
g94
g95
ssg76
g2055
sg69
(lp2066
S':'
asbag62
(g83
g64
NtRp2067
(dp2068
g67
(dp2069
sg76
g2055
sg69
(lp2070
g62
(g63
g64
NtRp2071
(dp2072
g67
(dp2073
g75
I4
ssg76
g2067
sg69
(lp2074
g1024
asbasbasbag62
(g78
g64
NtRp2075
(dp2076
g67
(dp2077
sg76
g1924
sg69
(lp2078
g62
(g83
g64
NtRp2079
(dp2080
g67
(dp2081
g87
g88
ssg76
g2075
sg69
(lp2082
g1209
asbag62
(g83
g64
NtRp2083
(dp2084
g67
(dp2085
g94
g95
ssg76
g2075
sg69
(lp2086
S':'
asbag62
(g83
g64
NtRp2087
(dp2088
g67
(dp2089
sg76
g2075
sg69
(lp2090
g62
(g63
g64
NtRp2091
(dp2092
g67
(dp2093
g75
I4
ssg76
g2087
sg69
(lp2094
g105
asbasbasbag62
(g78
g64
NtRp2095
(dp2096
g67
(dp2097
sg76
g1924
sg69
(lp2098
g62
(g83
g64
NtRp2099
(dp2100
g67
(dp2101
g87
g88
ssg76
g2095
sg69
(lp2102
g1230
asbag62
(g83
g64
NtRp2103
(dp2104
g67
(dp2105
g94
g95
ssg76
g2095
sg69
(lp2106
S':'
asbag62
(g83
g64
NtRp2107
(dp2108
g67
(dp2109
sg76
g2095
sg69
(lp2110
g62
(g63
g64
NtRp2111
(dp2112
g67
(dp2113
g75
I4
ssg76
g2107
sg69
(lp2114
g105
asbasbasbag62
(g78
g64
NtRp2115
(dp2116
g67
(dp2117
sg76
g1924
sg69
(lp2118
g62
(g83
g64
NtRp2119
(dp2120
g67
(dp2121
g87
g88
ssg76
g2115
sg69
(lp2122
g1489
asbag62
(g83
g64
NtRp2123
(dp2124
g67
(dp2125
g94
g95
ssg76
g2115
sg69
(lp2126
S':'
asbag62
(g83
g64
NtRp2127
(dp2128
g67
(dp2129
sg76
g2115
sg69
(lp2130
g62
(g63
g64
NtRp2131
(dp2132
g67
(dp2133
g75
I4
ssg76
g2127
sg69
(lp2134
g1502
asbasbasbag62
(g78
g64
NtRp2135
(dp2136
g67
(dp2137
sg76
g1924
sg69
(lp2138
g62
(g83
g64
NtRp2139
(dp2140
g67
(dp2141
g87
g88
ssg76
g2135
sg69
(lp2142
g1532
asbag62
(g83
g64
NtRp2143
(dp2144
g67
(dp2145
g94
g95
ssg76
g2135
sg69
(lp2146
S':'
asbag62
(g83
g64
NtRp2147
(dp2148
g67
(dp2149
sg76
g2135
sg69
(lp2150
g62
(g63
g64
NtRp2151
(dp2152
g67
(dp2153
g75
I4
ssg76
g2147
sg69
(lp2154
g62
(g71
g64
NtRp2155
(dp2156
g67
(dp2157
g75
I3
ssg76
Nsg69
(lp2158
g62
(g78
g64
NtRp2159
(dp2160
g67
(dp2161
sg76
g2155
sg69
(lp2162
g62
(g83
g64
NtRp2163
(dp2164
g67
(dp2165
sg76
g2159
sg69
(lp2166
g62
(g63
g64
NtRp2167
(dp2168
g67
(dp2169
g75
I3
ssg76
g2163
sg69
(lp2170
S'2'
asbasbasbag62
(g78
g64
NtRp2171
(dp2172
g67
(dp2173
sg76
g2155
sg69
(lp2174
g62
(g83
g64
NtRp2175
(dp2176
g67
(dp2177
sg76
g2171
sg69
(lp2178
g62
(g63
g64
NtRp2179
(dp2180
g67
(dp2181
g75
I3
ssg76
g2175
sg69
(lp2182
S'0'
asbasbasbag62
(g78
g64
NtRp2183
(dp2184
g67
(dp2185
sg76
g2155
sg69
(lp2186
g62
(g83
g64
NtRp2187
(dp2188
g67
(dp2189
sg76
g2183
sg69
(lp2190
g62
(g63
g64
NtRp2191
(dp2192
g67
(dp2193
g75
I3
ssg76
g2187
sg69
(lp2194
S'8'
asbasbasbag62
(g78
g64
NtRp2195
(dp2196
g67
(dp2197
sg76
g2155
sg69
(lp2198
g62
(g83
g64
NtRp2199
(dp2200
g67
(dp2201
sg76
g2195
sg69
(lp2202
g62
(g63
g64
NtRp2203
(dp2204
g67
(dp2205
g75
I3
ssg76
g2199
sg69
(lp2206
S'datetime.datetime(2012, 9, 7, 3, 47, 51)'
p2207
asbasbasbag62
(g78
g64
NtRp2208
(dp2209
g67
(dp2210
sg76
g2155
sg69
(lp2211
g62
(g83
g64
NtRp2212
(dp2213
g67
(dp2214
sg76
g2208
sg69
(lp2215
g62
(g63
g64
NtRp2216
(dp2217
g67
(dp2218
g75
I3
ssg76
g2212
sg69
(lp2219
g1610
asbasbasbasbasbasbasbasbasbasbasbag62
(g78
g64
NtRp2220
(dp2221
g67
(dp2222
sg76
g72
sg69
(lp2223
g62
(g83
g64
NtRp2224
(dp2225
g67
(dp2226
g87
g88
ssg76
g2220
sg69
(lp2227
S'is_https'
p2228
asbag62
(g83
g64
NtRp2229
(dp2230
g67
(dp2231
g94
g95
ssg76
g2220
sg69
(lp2232
S':'
asbag62
(g83
g64
NtRp2233
(dp2234
g67
(dp2235
sg76
g2220
sg69
(lp2236
g62
(g63
g64
NtRp2237
(dp2238
g67
(dp2239
g75
I5
ssg76
g2233
sg69
(lp2240
g105
asbasbasbag62
(g78
g64
NtRp2241
(dp2242
g67
(dp2243
sg76
g72
sg69
(lp2244
g62
(g83
g64
NtRp2245
(dp2246
g67
(dp2247
g87
g88
ssg76
g2241
sg69
(lp2248
S'is_local'
p2249
asbag62
(g83
g64
NtRp2250
(dp2251
g67
(dp2252
g94
g95
ssg76
g2241
sg69
(lp2253
S':'
asbag62
(g83
g64
NtRp2254
(dp2255
g67
(dp2256
sg76
g2241
sg69
(lp2257
g62
(g63
g64
NtRp2258
(dp2259
g67
(dp2260
g75
I5
ssg76
g2254
sg69
(lp2261
g1719
asbasbasbag62
(g78
g64
NtRp2262
(dp2263
g67
(dp2264
sg76
g72
sg69
(lp2265
g62
(g83
g64
NtRp2266
(dp2267
g67
(dp2268
g87
g88
ssg76
g2262
sg69
(lp2269
S'is_restful'
p2270
asbag62
(g83
g64
NtRp2271
(dp2272
g67
(dp2273
g94
g95
ssg76
g2262
sg69
(lp2274
S':'
asbag62
(g83
g64
NtRp2275
(dp2276
g67
(dp2277
sg76
g2262
sg69
(lp2278
g62
(g63
g64
NtRp2279
(dp2280
g67
(dp2281
g75
I5
ssg76
g2275
sg69
(lp2282
g105
asbasbasbag62
(g78
g64
NtRp2283
(dp2284
g67
(dp2285
sg76
g72
sg69
(lp2286
g62
(g83
g64
NtRp2287
(dp2288
g67
(dp2289
g87
g88
ssg76
g2283
sg69
(lp2290
S'now'
p2291
asbag62
(g83
g64
NtRp2292
(dp2293
g67
(dp2294
g94
g95
ssg76
g2283
sg69
(lp2295
S':'
asbag62
(g83
g64
NtRp2296
(dp2297
g67
(dp2298
sg76
g2283
sg69
(lp2299
g62
(g63
g64
NtRp2300
(dp2301
g67
(dp2302
g75
I5
ssg76
g2296
sg69
(lp2303
S'datetime.datetime(2012, 11, 3, 19, 9, 6, 175668)'
p2304
asbasbasbag62
(g78
g64
NtRp2305
(dp2306
g67
(dp2307
sg76
g72
sg69
(lp2308
g62
(g83
g64
NtRp2309
(dp2310
g67
(dp2311
g87
g88
ssg76
g2305
sg69
(lp2312
S'post_vars'
p2313
asbag62
(g83
g64
NtRp2314
(dp2315
g67
(dp2316
g94
g95
ssg76
g2305
sg69
(lp2317
S':'
asbag62
(g83
g64
NtRp2318
(dp2319
g67
(dp2320
sg76
g2305
sg69
(lp2321
g62
(g63
g64
NtRp2322
(dp2323
g67
(dp2324
g75
I5
ssg76
g2318
sg69
(lp2325
g62
(g71
g64
NtRp2326
(dp2327
g67
(dp2328
g75
I4
ssg76
Nsg69
(lp2329
sbasbasbasbag62
(g78
g64
NtRp2330
(dp2331
g67
(dp2332
sg76
g72
sg69
(lp2333
g62
(g83
g64
NtRp2334
(dp2335
g67
(dp2336
g87
g88
ssg76
g2330
sg69
(lp2337
S'raw_args'
p2338
asbag62
(g83
g64
NtRp2339
(dp2340
g67
(dp2341
g94
g95
ssg76
g2330
sg69
(lp2342
S':'
asbag62
(g83
g64
NtRp2343
(dp2344
g67
(dp2345
sg76
g2330
sg69
(lp2346
g62
(g63
g64
NtRp2347
(dp2348
g67
(dp2349
g75
I5
ssg76
g2343
sg69
(lp2350
g164
asbasbasbag62
(g78
g64
NtRp2351
(dp2352
g67
(dp2353
sg76
g72
sg69
(lp2354
g62
(g83
g64
NtRp2355
(dp2356
g67
(dp2357
g87
g88
ssg76
g2351
sg69
(lp2358
S'raw_extension'
p2359
asbag62
(g83
g64
NtRp2360
(dp2361
g67
(dp2362
g94
g95
ssg76
g2351
sg69
(lp2363
S':'
asbag62
(g83
g64
NtRp2364
(dp2365
g67
(dp2366
sg76
g2351
sg69
(lp2367
g62
(g63
g64
NtRp2368
(dp2369
g67
(dp2370
g75
I5
ssg76
g2364
sg69
(lp2371
S'None'
p2372
asbasbasbag62
(g78
g64
NtRp2373
(dp2374
g67
(dp2375
sg76
g72
sg69
(lp2376
g62
(g83
g64
NtRp2377
(dp2378
g67
(dp2379
g87
g88
ssg76
g2373
sg69
(lp2380
S'url'
p2381
asbag62
(g83
g64
NtRp2382
(dp2383
g67
(dp2384
g94
g95
ssg76
g2373
sg69
(lp2385
S':'
asbag62
(g83
g64
NtRp2386
(dp2387
g67
(dp2388
sg76
g2373
sg69
(lp2389
g62
(g63
g64
NtRp2390
(dp2391
g67
(dp2392
g75
I5
ssg76
g2386
sg69
(lp2393
g1264
asbasbasbag62
(g78
g64
NtRp2394
(dp2395
g67
(dp2396
sg76
g72
sg69
(lp2397
g62
(g83
g64
NtRp2398
(dp2399
g67
(dp2400
g87
g88
ssg76
g2394
sg69
(lp2401
S'utcnow'
p2402
asbag62
(g83
g64
NtRp2403
(dp2404
g67
(dp2405
g94
g95
ssg76
g2394
sg69
(lp2406
S':'
asbag62
(g83
g64
NtRp2407
(dp2408
g67
(dp2409
sg76
g2394
sg69
(lp2410
g62
(g63
g64
NtRp2411
(dp2412
g67
(dp2413
g75
I5
ssg76
g2407
sg69
(lp2414
S'datetime.datetime(2012, 11, 3, 13, 39, 6, 175706)'
p2415
asbasbasbag62
(g78
g64
NtRp2416
(dp2417
g67
(dp2418
sg76
g72
sg69
(lp2419
g62
(g83
g64
NtRp2420
(dp2421
g67
(dp2422
g87
g88
ssg76
g2416
sg69
(lp2423
S'uuid'
p2424
asbag62
(g83
g64
NtRp2425
(dp2426
g67
(dp2427
g94
g95
ssg76
g2416
sg69
(lp2428
S':'
asbag62
(g83
g64
NtRp2429
(dp2430
g67
(dp2431
sg76
g2416
sg69
(lp2432
g62
(g63
g64
NtRp2433
(dp2434
g67
(dp2435
g75
I5
ssg76
g2429
sg69
(lp2436
S'admin/127.0.0.1.2012-11-03.19-09-06.01e9d36a-7e2e-4392-964a-749a01f67592'
p2437
asbasbasbag62
(g78
g64
NtRp2438
(dp2439
g67
(dp2440
sg76
g72
sg69
(lp2441
g62
(g83
g64
NtRp2442
(dp2443
g67
(dp2444
g87
g88
ssg76
g2438
sg69
(lp2445
S'vars'
p2446
asbag62
(g83
g64
NtRp2447
(dp2448
g67
(dp2449
g94
g95
ssg76
g2438
sg69
(lp2450
S':'
asbag62
(g83
g64
NtRp2451
(dp2452
g67
(dp2453
sg76
g2438
sg69
(lp2454
g62
(g63
g64
NtRp2455
(dp2456
g67
(dp2457
g75
I5
ssg76
g2451
sg69
(lp2458
g62
(g71
g64
NtRp2459
(dp2460
g67
(dp2461
g75
I4
ssg76
Nsg69
(lp2462
sbasbasbasbag62
(g78
g64
NtRp2463
(dp2464
g67
(dp2465
sg76
g72
sg69
(lp2466
g62
(g83
g64
NtRp2467
(dp2468
g67
(dp2469
g87
g88
ssg76
g2463
sg69
(lp2470
S'wsgi'
p2471
asbag62
(g83
g64
NtRp2472
(dp2473
g67
(dp2474
g94
g95
ssg76
g2463
sg69
(lp2475
S':'
asbag62
(g83
g64
NtRp2476
(dp2477
g67
(dp2478
sg76
g2463
sg69
(lp2479
g62
(g63
g64
NtRp2480
(dp2481
g67
(dp2482
g75
I5
ssg76
g2476
sg69
(lp2483
g62
(g71
g64
NtRp2484
(dp2485
g67
(dp2486
g75
I4
ssg76
Nsg69
(lp2487
g62
(g78
g64
NtRp2488
(dp2489
g67
(dp2490
sg76
g2484
sg69
(lp2491
g62
(g83
g64
NtRp2492
(dp2493
g67
(dp2494
g87
g88
ssg76
g2488
sg69
(lp2495
S'environ'
p2496
asbag62
(g83
g64
NtRp2497
(dp2498
g67
(dp2499
g94
g95
ssg76
g2488
sg69
(lp2500
S':'
asbag62
(g83
g64
NtRp2501
(dp2502
g67
(dp2503
sg76
g2488
sg69
(lp2504
g62
(g63
g64
NtRp2505
(dp2506
g67
(dp2507
g75
I4
ssg76
g2501
sg69
(lp2508
g62
(g71
g64
NtRp2509
(dp2510
g67
(dp2511
g75
I3
ssg76
Nsg69
(lp2512
g62
(g78
g64
NtRp2513
(dp2514
g67
(dp2515
sg76
g2509
sg69
(lp2516
g62
(g83
g64
NtRp2517
(dp2518
g67
(dp2519
g87
g88
ssg76
g2513
sg69
(lp2520
S'HTTP_ACCEPT'
p2521
asbag62
(g83
g64
NtRp2522
(dp2523
g67
(dp2524
g94
g95
ssg76
g2513
sg69
(lp2525
S':'
asbag62
(g83
g64
NtRp2526
(dp2527
g67
(dp2528
sg76
g2513
sg69
(lp2529
g62
(g63
g64
NtRp2530
(dp2531
g67
(dp2532
g75
I3
ssg76
g2526
sg69
(lp2533
g1046
asbasbasbag62
(g78
g64
NtRp2534
(dp2535
g67
(dp2536
sg76
g2509
sg69
(lp2537
g62
(g83
g64
NtRp2538
(dp2539
g67
(dp2540
g87
g88
ssg76
g2534
sg69
(lp2541
S'HTTP_ACCEPT_ENCODING'
p2542
asbag62
(g83
g64
NtRp2543
(dp2544
g67
(dp2545
g94
g95
ssg76
g2534
sg69
(lp2546
S':'
asbag62
(g83
g64
NtRp2547
(dp2548
g67
(dp2549
sg76
g2534
sg69
(lp2550
g62
(g63
g64
NtRp2551
(dp2552
g67
(dp2553
g75
I3
ssg76
g2547
sg69
(lp2554
g1068
asbasbasbag62
(g78
g64
NtRp2555
(dp2556
g67
(dp2557
sg76
g2509
sg69
(lp2558
g62
(g83
g64
NtRp2559
(dp2560
g67
(dp2561
g87
g88
ssg76
g2555
sg69
(lp2562
S'HTTP_ACCEPT_LANGUAGE'
p2563
asbag62
(g83
g64
NtRp2564
(dp2565
g67
(dp2566
g94
g95
ssg76
g2555
sg69
(lp2567
S':'
asbag62
(g83
g64
NtRp2568
(dp2569
g67
(dp2570
sg76
g2555
sg69
(lp2571
g62
(g63
g64
NtRp2572
(dp2573
g67
(dp2574
g75
I3
ssg76
g2568
sg69
(lp2575
g1090
asbasbasbag62
(g78
g64
NtRp2576
(dp2577
g67
(dp2578
sg76
g2509
sg69
(lp2579
g62
(g83
g64
NtRp2580
(dp2581
g67
(dp2582
g87
g88
ssg76
g2576
sg69
(lp2583
S'HTTP_CONNECTION'
p2584
asbag62
(g83
g64
NtRp2585
(dp2586
g67
(dp2587
g94
g95
ssg76
g2576
sg69
(lp2588
S':'
asbag62
(g83
g64
NtRp2589
(dp2590
g67
(dp2591
sg76
g2576
sg69
(lp2592
g62
(g63
g64
NtRp2593
(dp2594
g67
(dp2595
g75
I3
ssg76
g2589
sg69
(lp2596
g1112
asbasbasbag62
(g78
g64
NtRp2597
(dp2598
g67
(dp2599
sg76
g2509
sg69
(lp2600
g62
(g83
g64
NtRp2601
(dp2602
g67
(dp2603
g87
g88
ssg76
g2597
sg69
(lp2604
S'HTTP_COOKIE'
p2605
asbag62
(g83
g64
NtRp2606
(dp2607
g67
(dp2608
g94
g95
ssg76
g2597
sg69
(lp2609
S':'
asbag62
(g83
g64
NtRp2610
(dp2611
g67
(dp2612
sg76
g2597
sg69
(lp2613
g62
(g63
g64
NtRp2614
(dp2615
g67
(dp2616
g75
I3
ssg76
g2610
sg69
(lp2617
g1134
asbasbasbag62
(g78
g64
NtRp2618
(dp2619
g67
(dp2620
sg76
g2509
sg69
(lp2621
g62
(g83
g64
NtRp2622
(dp2623
g67
(dp2624
g87
g88
ssg76
g2618
sg69
(lp2625
S'HTTP_HOST'
p2626
asbag62
(g83
g64
NtRp2627
(dp2628
g67
(dp2629
g94
g95
ssg76
g2618
sg69
(lp2630
S':'
asbag62
(g83
g64
NtRp2631
(dp2632
g67
(dp2633
sg76
g2618
sg69
(lp2634
g62
(g63
g64
NtRp2635
(dp2636
g67
(dp2637
g75
I3
ssg76
g2631
sg69
(lp2638
g1156
asbasbasbag62
(g78
g64
NtRp2639
(dp2640
g67
(dp2641
sg76
g2509
sg69
(lp2642
g62
(g83
g64
NtRp2643
(dp2644
g67
(dp2645
g87
g88
ssg76
g2639
sg69
(lp2646
S'HTTP_REFERER'
p2647
asbag62
(g83
g64
NtRp2648
(dp2649
g67
(dp2650
g94
g95
ssg76
g2639
sg69
(lp2651
S':'
asbag62
(g83
g64
NtRp2652
(dp2653
g67
(dp2654
sg76
g2639
sg69
(lp2655
g62
(g63
g64
NtRp2656
(dp2657
g67
(dp2658
g75
I3
ssg76
g2652
sg69
(lp2659
g1178
asbasbasbag62
(g78
g64
NtRp2660
(dp2661
g67
(dp2662
sg76
g2509
sg69
(lp2663
g62
(g83
g64
NtRp2664
(dp2665
g67
(dp2666
g87
g88
ssg76
g2660
sg69
(lp2667
S'HTTP_USER_AGENT'
p2668
asbag62
(g83
g64
NtRp2669
(dp2670
g67
(dp2671
g94
g95
ssg76
g2660
sg69
(lp2672
S':'
asbag62
(g83
g64
NtRp2673
(dp2674
g67
(dp2675
sg76
g2660
sg69
(lp2676
g62
(g63
g64
NtRp2677
(dp2678
g67
(dp2679
g75
I3
ssg76
g2673
sg69
(lp2680
g1200
asbasbasbag62
(g78
g64
NtRp2681
(dp2682
g67
(dp2683
sg76
g2509
sg69
(lp2684
g62
(g83
g64
NtRp2685
(dp2686
g67
(dp2687
g87
g88
ssg76
g2681
sg69
(lp2688
S'PATH_INFO'
p2689
asbag62
(g83
g64
NtRp2690
(dp2691
g67
(dp2692
g94
g95
ssg76
g2681
sg69
(lp2693
S':'
asbag62
(g83
g64
NtRp2694
(dp2695
g67
(dp2696
sg76
g2681
sg69
(lp2697
g62
(g63
g64
NtRp2698
(dp2699
g67
(dp2700
g75
I3
ssg76
g2694
sg69
(lp2701
g1264
asbasbasbag62
(g78
g64
NtRp2702
(dp2703
g67
(dp2704
sg76
g2509
sg69
(lp2705
g62
(g83
g64
NtRp2706
(dp2707
g67
(dp2708
g87
g88
ssg76
g2702
sg69
(lp2709
S'QUERY_STRING'
p2710
asbag62
(g83
g64
NtRp2711
(dp2712
g67
(dp2713
g94
g95
ssg76
g2702
sg69
(lp2714
S':'
asbag62
(g83
g64
NtRp2715
(dp2716
g67
(dp2717
sg76
g2702
sg69
(lp2718
g62
(g63
g64
NtRp2719
(dp2720
g67
(dp2721
g75
I3
ssg76
g2715
sg69
(lp2722
S''
asbasbasbag62
(g78
g64
NtRp2723
(dp2724
g67
(dp2725
sg76
g2509
sg69
(lp2726
g62
(g83
g64
NtRp2727
(dp2728
g67
(dp2729
g87
g88
ssg76
g2723
sg69
(lp2730
S'REMOTE_ADDR'
p2731
asbag62
(g83
g64
NtRp2732
(dp2733
g67
(dp2734
g94
g95
ssg76
g2723
sg69
(lp2735
S':'
asbag62
(g83
g64
NtRp2736
(dp2737
g67
(dp2738
sg76
g2723
sg69
(lp2739
g62
(g63
g64
NtRp2740
(dp2741
g67
(dp2742
g75
I3
ssg76
g2736
sg69
(lp2743
g230
asbasbasbag62
(g78
g64
NtRp2744
(dp2745
g67
(dp2746
sg76
g2509
sg69
(lp2747
g62
(g83
g64
NtRp2748
(dp2749
g67
(dp2750
g87
g88
ssg76
g2744
sg69
(lp2751
S'REMOTE_PORT'
p2752
asbag62
(g83
g64
NtRp2753
(dp2754
g67
(dp2755
g94
g95
ssg76
g2744
sg69
(lp2756
S':'
asbag62
(g83
g64
NtRp2757
(dp2758
g67
(dp2759
sg76
g2744
sg69
(lp2760
g62
(g63
g64
NtRp2761
(dp2762
g67
(dp2763
g75
I3
ssg76
g2757
sg69
(lp2764
g1328
asbasbasbag62
(g78
g64
NtRp2765
(dp2766
g67
(dp2767
sg76
g2509
sg69
(lp2768
g62
(g83
g64
NtRp2769
(dp2770
g67
(dp2771
g87
g88
ssg76
g2765
sg69
(lp2772
S'REQUEST_METHOD'
p2773
asbag62
(g83
g64
NtRp2774
(dp2775
g67
(dp2776
g94
g95
ssg76
g2765
sg69
(lp2777
S':'
asbag62
(g83
g64
NtRp2778
(dp2779
g67
(dp2780
sg76
g2765
sg69
(lp2781
g62
(g63
g64
NtRp2782
(dp2783
g67
(dp2784
g75
I3
ssg76
g2778
sg69
(lp2785
g1350
asbasbasbag62
(g78
g64
NtRp2786
(dp2787
g67
(dp2788
sg76
g2509
sg69
(lp2789
g62
(g83
g64
NtRp2790
(dp2791
g67
(dp2792
g87
g88
ssg76
g2786
sg69
(lp2793
S'REQUEST_URI'
p2794
asbag62
(g83
g64
NtRp2795
(dp2796
g67
(dp2797
g94
g95
ssg76
g2786
sg69
(lp2798
S':'
asbag62
(g83
g64
NtRp2799
(dp2800
g67
(dp2801
sg76
g2786
sg69
(lp2802
g62
(g63
g64
NtRp2803
(dp2804
g67
(dp2805
g75
I3
ssg76
g2799
sg69
(lp2806
g1264
asbasbasbag62
(g78
g64
NtRp2807
(dp2808
g67
(dp2809
sg76
g2509
sg69
(lp2810
g62
(g83
g64
NtRp2811
(dp2812
g67
(dp2813
g87
g88
ssg76
g2807
sg69
(lp2814
S'SCRIPT_NAME'
p2815
asbag62
(g83
g64
NtRp2816
(dp2817
g67
(dp2818
g94
g95
ssg76
g2807
sg69
(lp2819
S':'
asbag62
(g83
g64
NtRp2820
(dp2821
g67
(dp2822
sg76
g2807
sg69
(lp2823
g62
(g63
g64
NtRp2824
(dp2825
g67
(dp2826
g75
I3
ssg76
g2820
sg69
(lp2827
S''
asbasbasbag62
(g78
g64
NtRp2828
(dp2829
g67
(dp2830
sg76
g2509
sg69
(lp2831
g62
(g83
g64
NtRp2832
(dp2833
g67
(dp2834
g87
g88
ssg76
g2828
sg69
(lp2835
S'SERVER_NAME'
p2836
asbag62
(g83
g64
NtRp2837
(dp2838
g67
(dp2839
g94
g95
ssg76
g2828
sg69
(lp2840
S':'
asbag62
(g83
g64
NtRp2841
(dp2842
g67
(dp2843
sg76
g2828
sg69
(lp2844
g62
(g63
g64
NtRp2845
(dp2846
g67
(dp2847
g75
I3
ssg76
g2841
sg69
(lp2848
g1414
asbasbasbag62
(g78
g64
NtRp2849
(dp2850
g67
(dp2851
sg76
g2509
sg69
(lp2852
g62
(g83
g64
NtRp2853
(dp2854
g67
(dp2855
g87
g88
ssg76
g2849
sg69
(lp2856
S'SERVER_PORT'
p2857
asbag62
(g83
g64
NtRp2858
(dp2859
g67
(dp2860
g94
g95
ssg76
g2849
sg69
(lp2861
S':'
asbag62
(g83
g64
NtRp2862
(dp2863
g67
(dp2864
sg76
g2849
sg69
(lp2865
g62
(g63
g64
NtRp2866
(dp2867
g67
(dp2868
g75
I3
ssg76
g2862
sg69
(lp2869
g1436
asbasbasbag62
(g78
g64
NtRp2870
(dp2871
g67
(dp2872
sg76
g2509
sg69
(lp2873
g62
(g83
g64
NtRp2874
(dp2875
g67
(dp2876
g87
g88
ssg76
g2870
sg69
(lp2877
S'SERVER_PROTOCOL'
p2878
asbag62
(g83
g64
NtRp2879
(dp2880
g67
(dp2881
g94
g95
ssg76
g2870
sg69
(lp2882
S':'
asbag62
(g83
g64
NtRp2883
(dp2884
g67
(dp2885
sg76
g2870
sg69
(lp2886
g62
(g63
g64
NtRp2887
(dp2888
g67
(dp2889
g75
I3
ssg76
g2883
sg69
(lp2890
g1458
asbasbasbag62
(g78
g64
NtRp2891
(dp2892
g67
(dp2893
sg76
g2509
sg69
(lp2894
g62
(g83
g64
NtRp2895
(dp2896
g67
(dp2897
g87
g88
ssg76
g2891
sg69
(lp2898
S'SERVER_SOFTWARE'
p2899
asbag62
(g83
g64
NtRp2900
(dp2901
g67
(dp2902
g94
g95
ssg76
g2891
sg69
(lp2903
S':'
asbag62
(g83
g64
NtRp2904
(dp2905
g67
(dp2906
sg76
g2891
sg69
(lp2907
g62
(g63
g64
NtRp2908
(dp2909
g67
(dp2910
g75
I3
ssg76
g2904
sg69
(lp2911
g1480
asbasbasbag62
(g78
g64
NtRp2912
(dp2913
g67
(dp2914
sg76
g2509
sg69
(lp2915
g62
(g83
g64
NtRp2916
(dp2917
g67
(dp2918
g87
g88
ssg76
g2912
sg69
(lp2919
S'wsgi.errors'
p2920
asbag62
(g83
g64
NtRp2921
(dp2922
g67
(dp2923
g94
g95
ssg76
g2912
sg69
(lp2924
S':'
asbag62
(g83
g64
NtRp2925
(dp2926
g67
(dp2927
sg76
g2912
sg69
(lp2928
g62
(g63
g64
NtRp2929
(dp2930
g67
(dp2931
g75
I3
ssg76
g2925
sg69
(lp2932
S"<open file '<stderr>', mode 'w' at 0x7fd9c3e0b270>"
p2933
asbasbasbag62
(g78
g64
NtRp2934
(dp2935
g67
(dp2936
sg76
g2509
sg69
(lp2937
g62
(g83
g64
NtRp2938
(dp2939
g67
(dp2940
g87
g88
ssg76
g2934
sg69
(lp2941
S'wsgi.file_wrapper'
p2942
asbag62
(g83
g64
NtRp2943
(dp2944
g67
(dp2945
g94
g95
ssg76
g2934
sg69
(lp2946
S':'
asbag62
(g83
g64
NtRp2947
(dp2948
g67
(dp2949
sg76
g2934
sg69
(lp2950
g62
(g63
g64
NtRp2951
(dp2952
g67
(dp2953
g75
I3
ssg76
g2947
sg69
(lp2954
S'<class wsgiref.util.FileWrapper at 0x2b7e120>'
p2955
asbasbasbag62
(g78
g64
NtRp2956
(dp2957
g67
(dp2958
sg76
g2509
sg69
(lp2959
g62
(g83
g64
NtRp2960
(dp2961
g67
(dp2962
g87
g88
ssg76
g2956
sg69
(lp2963
S'wsgi.input'
p2964
asbag62
(g83
g64
NtRp2965
(dp2966
g67
(dp2967
g94
g95
ssg76
g2956
sg69
(lp2968
S':'
asbag62
(g83
g64
NtRp2969
(dp2970
g67
(dp2971
sg76
g2956
sg69
(lp2972
g62
(g63
g64
NtRp2973
(dp2974
g67
(dp2975
g75
I3
ssg76
g2969
sg69
(lp2976
S'<cStringIO.StringO object at 0x7fd9a02823b0>'
p2977
asbasbasbag62
(g78
g64
NtRp2978
(dp2979
g67
(dp2980
sg76
g2509
sg69
(lp2981
g62
(g83
g64
NtRp2982
(dp2983
g67
(dp2984
g87
g88
ssg76
g2978
sg69
(lp2985
S'wsgi.multiprocess'
p2986
asbag62
(g83
g64
NtRp2987
(dp2988
g67
(dp2989
g94
g95
ssg76
g2978
sg69
(lp2990
S':'
asbag62
(g83
g64
NtRp2991
(dp2992
g67
(dp2993
sg76
g2978
sg69
(lp2994
g62
(g63
g64
NtRp2995
(dp2996
g67
(dp2997
g75
I3
ssg76
g2991
sg69
(lp2998
g105
asbasbasbag62
(g78
g64
NtRp2999
(dp3000
g67
(dp3001
sg76
g2509
sg69
(lp3002
g62
(g83
g64
NtRp3003
(dp3004
g67
(dp3005
g87
g88
ssg76
g2999
sg69
(lp3006
S'wsgi.multithread'
p3007
asbag62
(g83
g64
NtRp3008
(dp3009
g67
(dp3010
g94
g95
ssg76
g2999
sg69
(lp3011
S':'
asbag62
(g83
g64
NtRp3012
(dp3013
g67
(dp3014
sg76
g2999
sg69
(lp3015
g62
(g63
g64
NtRp3016
(dp3017
g67
(dp3018
g75
I3
ssg76
g3012
sg69
(lp3019
g1719
asbasbasbag62
(g78
g64
NtRp3020
(dp3021
g67
(dp3022
sg76
g2509
sg69
(lp3023
g62
(g83
g64
NtRp3024
(dp3025
g67
(dp3026
g87
g88
ssg76
g3020
sg69
(lp3027
S'wsgi.run_once'
p3028
asbag62
(g83
g64
NtRp3029
(dp3030
g67
(dp3031
g94
g95
ssg76
g3020
sg69
(lp3032
S':'
asbag62
(g83
g64
NtRp3033
(dp3034
g67
(dp3035
sg76
g3020
sg69
(lp3036
g62
(g63
g64
NtRp3037
(dp3038
g67
(dp3039
g75
I3
ssg76
g3033
sg69
(lp3040
g105
asbasbasbag62
(g78
g64
NtRp3041
(dp3042
g67
(dp3043
sg76
g2509
sg69
(lp3044
g62
(g83
g64
NtRp3045
(dp3046
g67
(dp3047
g87
g88
ssg76
g3041
sg69
(lp3048
S'wsgi.url_scheme'
p3049
asbag62
(g83
g64
NtRp3050
(dp3051
g67
(dp3052
g94
g95
ssg76
g3041
sg69
(lp3053
S':'
asbag62
(g83
g64
NtRp3054
(dp3055
g67
(dp3056
sg76
g3041
sg69
(lp3057
g62
(g63
g64
NtRp3058
(dp3059
g67
(dp3060
g75
I3
ssg76
g3054
sg69
(lp3061
g1762
asbasbasbag62
(g78
g64
NtRp3062
(dp3063
g67
(dp3064
sg76
g2509
sg69
(lp3065
g62
(g83
g64
NtRp3066
(dp3067
g67
(dp3068
g87
g88
ssg76
g3062
sg69
(lp3069
S'wsgi.version'
p3070
asbag62
(g83
g64
NtRp3071
(dp3072
g67
(dp3073
g94
g95
ssg76
g3062
sg69
(lp3074
S':'
asbag62
(g83
g64
NtRp3075
(dp3076
g67
(dp3077
sg76
g3062
sg69
(lp3078
g62
(g63
g64
NtRp3079
(dp3080
g67
(dp3081
g75
I3
ssg76
g3075
sg69
(lp3082
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p3083
(lp3084
(dp3085
S'file'
p3086
S'/home/mayank/IIIT/sem 3/SSAD&Project/web2py/gluon/restricted.py'
p3087
sS'dump'
p3088
(dp3089
S'environment'
p3090
S"{'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'A_button': <function A_button>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, ...}"
p3091
sS'ccode'
p3092
S'<code object <module> at 0x7fd9a03e0030, file "/...plications/admin/controllers/default.py", line 3>'
p3093
ssS'lnum'
p3094
I209
sS'lines'
p3095
(dp3096
I204
S'    try:'
p3097
sI205
S'        if type(code) == types.CodeType:'
p3098
sI206
S'            ccode = code'
p3099
sI207
S'        else:'
p3100
sI208
S'            ccode = compile2(code,layer)'
p3101
sI209
S'        exec ccode in environment'
p3102
sI210
S'    except HTTP:'
p3103
sI211
S'        raise'
p3104
sI212
S'    except RestrictedError:'
p3105
sI213
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p3106
ssS'call'
p3107
S"(code='# coding: utf8\\n\\nEXPERIMENTAL_STUFF = True\\n\\nif EX...=form)\\n\\n\\nresponse._vars=response._caller(design)\\n', environment={'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'A_button': <function A_button>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, ...}, layer='/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/admin/controllers/default.py')"
p3108
sS'func'
p3109
S'restricted'
p3110
sa(dp3111
g3086
S'/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/admin/controllers/default.py'
p3112
sg3088
(dp3113
sg3094
I1726
sg3095
(dp3114
I1715
S"            redirect(URL('site'))"
p3115
sI1716
S'        except UnmergedEntriesError:'
p3116
sI1717
S'            session.flash = T("Push failed, there are unmerged entries in the cache. Resolve merge issues manually and try again.")'
p3117
sI1718
S"            redirect(URL('site'))"
p3118
sI1719
S'        except Exception, e:'
p3119
sI1720
S'            logging.error("Unexpected error:", sys.exc_info()[0])'
p3120
sI1721
S'            session.flash = T("Push failed, git exited abnormally. See logs for details.")'
p3121
sI1722
S"            redirect(URL('site'))"
p3122
sI1723
S'    return dict(app=app,form=form)'
p3123
sI1724
S''
ssg3107
S'()'
p3124
sg3109
S'<module>'
p3125
sa(dp3126
g3086
S'/home/mayank/IIIT/sem 3/SSAD&Project/web2py/gluon/globals.py'
p3127
sg3088
(dp3128
S'self'
p3129
S'undefined'
p3130
sS'f'
S'<function design>'
p3131
ssg3094
I185
sg3095
(dp3132
I180
S'        self.menu = []             # used by the default view layout'
p3133
sI181
S'        self.files = []            # used by web2py_ajax.html'
p3134
sI182
S'        self.generic_patterns = [] # patterns to allow generic views'
p3135
sI183
S"        self.delimiters = ('{{','}}')"
p3136
sI184
S'        self._vars = None'
p3137
sI185
S'        self._caller = lambda f: f()'
p3138
sI186
S'        self._view_environment = None'
p3139
sI187
S'        self._custom_commit = None'
p3140
sI188
S'        self._custom_rollback = None'
p3141
sI189
S''
ssg3107
S'(f=<function design>)'
p3142
sg3109
S'<lambda>'
p3143
sa(dp3144
g3086
S'/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/admin/controllers/default.py'
p3145
sg3088
(dp3146
S'global request'
p3147
S"<Storage {'function': 'design', 'body': <cString...applications/admin/', 'post_vars': <Storage {}>}>"
p3148
sS'global read_possible_languages'
p3149
S'<function read_possible_languages>'
p3150
sS'app'
p3151
S"'taship1'"
p3152
sS'r'
g3130
sS'global apath'
p3153
S'<function apath>'
p3154
sS').iteritems'
p3155
S'<built-in method iteritems of Request object>'
p3156
ssg3094
I953
sg3095
(dp3157
I948
S"    statics = [x.replace('\\\\','/') for x in statics]"
p3158
sI949
S'    statics.sort()'
p3159
sI950
S''
sI951
S'    # Get all languages'
p3160
sI952
S"    all_languages=dict([(lang+'.py',info[0]) for lang,info"
p3161
sI953
S'                        in read_possible_languages(apath(app, r=request)).iteritems()'
p3162
sI954
S'                        if info[2]!=0]) # info[2] is langfile_mtime:'
p3163
sI955
S'                                        # get only existed files'
p3164
sI956
S'    languages = sorted(all_languages)'
p3165
sI957
S''
ssg3107
S'()'
p3166
sg3109
S'design'
p3167
sa(dp3168
g3086
S'/home/mayank/IIIT/sem 3/SSAD&Project/web2py/gluon/languages.py'
p3169
sg3088
(dp3170
S'os.listdir'
p3171
S'<built-in function listdir>'
p3172
sS'global os'
p3173
S"<module 'os' from '/usr/lib/python2.7/os.pyc'>"
p3174
sS'langdir'
p3175
S"'/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/taship1/languages'"
p3176
sS'filename'
p3177
g3130
ssg3094
I209
sg3095
(dp3178
I204
S''
sI205
S'def read_possible_languages(appdir):'
p3179
sI206
S'    langs = {}'
p3180
sI207
S'    # scan languages directory for langfiles:'
p3181
sI208
S"    langdir = ospath.join(appdir,'languages')"
p3182
sI209
S'    for filename in os.listdir(langdir):'
p3183
sI210
S"        if regex_langfile.match(filename) or filename=='default.py':"
p3184
sI211
S'            lang = filename[:-3]'
p3185
sI212
S'            langs[lang] = get_lang_info(lang, langdir)'
p3186
sI213
S"    if not 'en' in langs:"
p3187
ssg3107
S"(appdir='/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/taship1')"
p3188
sg3109
S'read_possible_languages'
p3189
sasS'pyver'
p3190
S'Python 2.7.3: /usr/bin/python'
p3191
sS'session'
p3192
g62
(g63
g64
NtRp3193
(dp3194
g67
(dp3195
sg69
(lp3196
g62
(g71
g64
NtRp3197
(dp3198
g67
(dp3199
g75
I5
ssg76
Nsg69
(lp3200
g62
(g78
g64
NtRp3201
(dp3202
g67
(dp3203
sg76
g3197
sg69
(lp3204
g62
(g83
g64
NtRp3205
(dp3206
g67
(dp3207
g87
g88
ssg76
g3201
sg69
(lp3208
S'authorized'
p3209
asbag62
(g83
g64
NtRp3210
(dp3211
g67
(dp3212
g94
g95
ssg76
g3201
sg69
(lp3213
S':'
asbag62
(g83
g64
NtRp3214
(dp3215
g67
(dp3216
sg76
g3201
sg69
(lp3217
g62
(g63
g64
NtRp3218
(dp3219
g67
(dp3220
g75
I5
ssg76
g3214
sg69
(lp3221
g1719
asbasbasbag62
(g78
g64
NtRp3222
(dp3223
g67
(dp3224
sg76
g3197
sg69
(lp3225
g62
(g83
g64
NtRp3226
(dp3227
g67
(dp3228
g87
g88
ssg76
g3222
sg69
(lp3229
S'check_version'
p3230
asbag62
(g83
g64
NtRp3231
(dp3232
g67
(dp3233
g94
g95
ssg76
g3222
sg69
(lp3234
S':'
asbag62
(g83
g64
NtRp3235
(dp3236
g67
(dp3237
sg76
g3222
sg69
(lp3238
g62
(g63
g64
NtRp3239
(dp3240
g67
(dp3241
g75
I5
ssg76
g3235
sg69
(lp3242
g105
asbasbasbag62
(g78
g64
NtRp3243
(dp3244
g67
(dp3245
sg76
g3197
sg69
(lp3246
g62
(g83
g64
NtRp3247
(dp3248
g67
(dp3249
g87
g88
ssg76
g3243
sg69
(lp3250
S'flash'
p3251
asbag62
(g83
g64
NtRp3252
(dp3253
g67
(dp3254
g94
g95
ssg76
g3243
sg69
(lp3255
S':'
asbag62
(g83
g64
NtRp3256
(dp3257
g67
(dp3258
sg76
g3243
sg69
(lp3259
g62
(g63
g64
NtRp3260
(dp3261
g67
(dp3262
g75
I5
ssg76
g3256
sg69
(lp3263
S'None'
p3264
asbasbasbag62
(g78
g64
NtRp3265
(dp3266
g67
(dp3267
sg76
g3197
sg69
(lp3268
g62
(g83
g64
NtRp3269
(dp3270
g67
(dp3271
g87
g88
ssg76
g3265
sg69
(lp3272
S'last_time'
p3273
asbag62
(g83
g64
NtRp3274
(dp3275
g67
(dp3276
g94
g95
ssg76
g3265
sg69
(lp3277
S':'
asbag62
(g83
g64
NtRp3278
(dp3279
g67
(dp3280
sg76
g3265
sg69
(lp3281
g62
(g63
g64
NtRp3282
(dp3283
g67
(dp3284
g75
I5
ssg76
g3278
sg69
(lp3285
S'1351949946.182415'
p3286
asbasbasbag62
(g78
g64
NtRp3287
(dp3288
g67
(dp3289
sg76
g3197
sg69
(lp3290
g62
(g83
g64
NtRp3291
(dp3292
g67
(dp3293
g87
g88
ssg76
g3287
sg69
(lp3294
S'pam_user'
p3295
asbag62
(g83
g64
NtRp3296
(dp3297
g67
(dp3298
g94
g95
ssg76
g3287
sg69
(lp3299
S':'
asbag62
(g83
g64
NtRp3300
(dp3301
g67
(dp3302
sg76
g3287
sg69
(lp3303
g62
(g63
g64
NtRp3304
(dp3305
g67
(dp3306
g75
I5
ssg76
g3300
sg69
(lp3307
S'None'
p3308
asbasbasbag62
(g78
g64
NtRp3309
(dp3310
g67
(dp3311
sg76
g3197
sg69
(lp3312
g62
(g83
g64
NtRp3313
(dp3314
g67
(dp3315
g87
g88
ssg76
g3309
sg69
(lp3316
S'token'
p3317
asbag62
(g83
g64
NtRp3318
(dp3319
g67
(dp3320
g94
g95
ssg76
g3309
sg69
(lp3321
S':'
asbag62
(g83
g64
NtRp3322
(dp3323
g67
(dp3324
sg76
g3309
sg69
(lp3325
g62
(g63
g64
NtRp3326
(dp3327
g67
(dp3328
g75
I5
ssg76
g3322
sg69
(lp3329
S'640ea4ba-0212-4fdb-a446-472256f67d57'
p3330
asbasbasbasbasbsS'etype'
p3331
S"<type 'exceptions.OSError'>"
p3332
sS'date'
p3333
S'Sat Nov  3 19:09:06 2012'
p3334
sS'response'
p3335
g62
(g63
g64
NtRp3336
(dp3337
g67
(dp3338
sg69
(lp3339
g62
(g71
g64
NtRp3340
(dp3341
g67
(dp3342
g75
I5
ssg76
Nsg69
(lp3343
g62
(g78
g64
NtRp3344
(dp3345
g67
(dp3346
sg76
g3340
sg69
(lp3347
g62
(g83
g64
NtRp3348
(dp3349
g67
(dp3350
g87
g88
ssg76
g3344
sg69
(lp3351
g173
asbag62
(g83
g64
NtRp3352
(dp3353
g67
(dp3354
g94
g95
ssg76
g3344
sg69
(lp3355
S':'
asbag62
(g83
g64
NtRp3356
(dp3357
g67
(dp3358
sg76
g3344
sg69
(lp3359
g62
(g63
g64
NtRp3360
(dp3361
g67
(dp3362
g75
I5
ssg76
g3356
sg69
(lp3363
S'<cStringIO.StringO object at 0x7fd9ac287928>'
p3364
asbasbasbag62
(g78
g64
NtRp3365
(dp3366
g67
(dp3367
sg76
g3340
sg69
(lp3368
g62
(g83
g64
NtRp3369
(dp3370
g67
(dp3371
g87
g88
ssg76
g3365
sg69
(lp3372
g261
asbag62
(g83
g64
NtRp3373
(dp3374
g67
(dp3375
g94
g95
ssg76
g3365
sg69
(lp3376
S':'
asbag62
(g83
g64
NtRp3377
(dp3378
g67
(dp3379
sg76
g3365
sg69
(lp3380
g62
(g63
g64
NtRp3381
(dp3382
g67
(dp3383
g75
I5
ssg76
g3377
sg69
(lp3384
g62
(g71
g64
NtRp3385
(dp3386
g67
(dp3387
g75
I4
ssg76
Nsg69
(lp3388
g62
(g78
g64
NtRp3389
(dp3390
g67
(dp3391
sg76
g3385
sg69
(lp3392
g62
(g83
g64
NtRp3393
(dp3394
g67
(dp3395
g87
g88
ssg76
g3389
sg69
(lp3396
S'session_id_admin'
p3397
asbag62
(g83
g64
NtRp3398
(dp3399
g67
(dp3400
g94
g95
ssg76
g3389
sg69
(lp3401
S':'
asbag62
(g83
g64
NtRp3402
(dp3403
g67
(dp3404
sg76
g3389
sg69
(lp3405
g62
(g63
g64
NtRp3406
(dp3407
g67
(dp3408
g75
I4
ssg76
g3402
sg69
(lp3409
g299
ag62
(g71
g64
NtRp3410
(dp3411
g67
(dp3412
g75
I3
ssg76
Nsg69
(lp3413
g62
(g78
g64
NtRp3414
(dp3415
g67
(dp3416
sg76
g3410
sg69
(lp3417
g62
(g83
g64
NtRp3418
(dp3419
g67
(dp3420
g87
g88
ssg76
g3414
sg69
(lp3421
g312
asbag62
(g83
g64
NtRp3422
(dp3423
g67
(dp3424
g94
g95
ssg76
g3414
sg69
(lp3425
S':'
asbag62
(g83
g64
NtRp3426
(dp3427
g67
(dp3428
sg76
g3414
sg69
(lp3429
g62
(g63
g64
NtRp3430
(dp3431
g67
(dp3432
g75
I3
ssg76
g3426
sg69
(lp3433
S''
asbasbasbag62
(g78
g64
NtRp3434
(dp3435
g67
(dp3436
sg76
g3410
sg69
(lp3437
g62
(g83
g64
NtRp3438
(dp3439
g67
(dp3440
g87
g88
ssg76
g3434
sg69
(lp3441
g333
asbag62
(g83
g64
NtRp3442
(dp3443
g67
(dp3444
g94
g95
ssg76
g3434
sg69
(lp3445
S':'
asbag62
(g83
g64
NtRp3446
(dp3447
g67
(dp3448
sg76
g3434
sg69
(lp3449
g62
(g63
g64
NtRp3450
(dp3451
g67
(dp3452
g75
I3
ssg76
g3446
sg69
(lp3453
S''
asbasbasbag62
(g78
g64
NtRp3454
(dp3455
g67
(dp3456
sg76
g3410
sg69
(lp3457
g62
(g83
g64
NtRp3458
(dp3459
g67
(dp3460
g87
g88
ssg76
g3454
sg69
(lp3461
g354
asbag62
(g83
g64
NtRp3462
(dp3463
g67
(dp3464
g94
g95
ssg76
g3454
sg69
(lp3465
S':'
asbag62
(g83
g64
NtRp3466
(dp3467
g67
(dp3468
sg76
g3454
sg69
(lp3469
g62
(g63
g64
NtRp3470
(dp3471
g67
(dp3472
g75
I3
ssg76
g3466
sg69
(lp3473
S''
asbasbasbag62
(g78
g64
NtRp3474
(dp3475
g67
(dp3476
sg76
g3410
sg69
(lp3477
g62
(g83
g64
NtRp3478
(dp3479
g67
(dp3480
g87
g88
ssg76
g3474
sg69
(lp3481
g375
asbag62
(g83
g64
NtRp3482
(dp3483
g67
(dp3484
g94
g95
ssg76
g3474
sg69
(lp3485
S':'
asbag62
(g83
g64
NtRp3486
(dp3487
g67
(dp3488
sg76
g3474
sg69
(lp3489
g62
(g63
g64
NtRp3490
(dp3491
g67
(dp3492
g75
I3
ssg76
g3486
sg69
(lp3493
S''
asbasbasbag62
(g78
g64
NtRp3494
(dp3495
g67
(dp3496
sg76
g3410
sg69
(lp3497
g62
(g83
g64
NtRp3498
(dp3499
g67
(dp3500
g87
g88
ssg76
g3494
sg69
(lp3501
g396
asbag62
(g83
g64
NtRp3502
(dp3503
g67
(dp3504
g94
g95
ssg76
g3494
sg69
(lp3505
S':'
asbag62
(g83
g64
NtRp3506
(dp3507
g67
(dp3508
sg76
g3494
sg69
(lp3509
g62
(g63
g64
NtRp3510
(dp3511
g67
(dp3512
g75
I3
ssg76
g3506
sg69
(lp3513
S''
asbasbasbag62
(g78
g64
NtRp3514
(dp3515
g67
(dp3516
sg76
g3410
sg69
(lp3517
g62
(g83
g64
NtRp3518
(dp3519
g67
(dp3520
g87
g88
ssg76
g3514
sg69
(lp3521
g417
asbag62
(g83
g64
NtRp3522
(dp3523
g67
(dp3524
g94
g95
ssg76
g3514
sg69
(lp3525
S':'
asbag62
(g83
g64
NtRp3526
(dp3527
g67
(dp3528
sg76
g3514
sg69
(lp3529
g62
(g63
g64
NtRp3530
(dp3531
g67
(dp3532
g75
I3
ssg76
g3526
sg69
(lp3533
S'/'
asbasbasbag62
(g78
g64
NtRp3534
(dp3535
g67
(dp3536
sg76
g3410
sg69
(lp3537
g62
(g83
g64
NtRp3538
(dp3539
g67
(dp3540
g87
g88
ssg76
g3534
sg69
(lp3541
g438
asbag62
(g83
g64
NtRp3542
(dp3543
g67
(dp3544
g94
g95
ssg76
g3534
sg69
(lp3545
S':'
asbag62
(g83
g64
NtRp3546
(dp3547
g67
(dp3548
sg76
g3534
sg69
(lp3549
g62
(g63
g64
NtRp3550
(dp3551
g67
(dp3552
g75
I3
ssg76
g3546
sg69
(lp3553
S''
asbasbasbag62
(g78
g64
NtRp3554
(dp3555
g67
(dp3556
sg76
g3410
sg69
(lp3557
g62
(g83
g64
NtRp3558
(dp3559
g67
(dp3560
g87
g88
ssg76
g3554
sg69
(lp3561
g459
asbag62
(g83
g64
NtRp3562
(dp3563
g67
(dp3564
g94
g95
ssg76
g3554
sg69
(lp3565
S':'
asbag62
(g83
g64
NtRp3566
(dp3567
g67
(dp3568
sg76
g3554
sg69
(lp3569
g62
(g63
g64
NtRp3570
(dp3571
g67
(dp3572
g75
I3
ssg76
g3566
sg69
(lp3573
S''
asbasbasbasbasbasbasbasbasbasbasbag62
(g78
g64
NtRp3574
(dp3575
g67
(dp3576
sg76
g3340
sg69
(lp3577
g62
(g83
g64
NtRp3578
(dp3579
g67
(dp3580
g87
g88
ssg76
g3574
sg69
(lp3581
S'delimiters'
p3582
asbag62
(g83
g64
NtRp3583
(dp3584
g67
(dp3585
g94
g95
ssg76
g3574
sg69
(lp3586
S':'
asbag62
(g83
g64
NtRp3587
(dp3588
g67
(dp3589
sg76
g3574
sg69
(lp3590
g62
(g63
g64
NtRp3591
(dp3592
g67
(dp3593
g75
I5
ssg76
g3587
sg69
(lp3594
g62
(g71
g64
NtRp3595
(dp3596
g67
(dp3597
g75
I4
ssg76
Nsg69
(lp3598
g62
(g78
g64
NtRp3599
(dp3600
g67
(dp3601
sg76
g3595
sg69
(lp3602
g62
(g83
g64
NtRp3603
(dp3604
g67
(dp3605
sg76
g3599
sg69
(lp3606
g62
(g63
g64
NtRp3607
(dp3608
g67
(dp3609
g75
I4
ssg76
g3603
sg69
(lp3610
S'{{'
p3611
asbasbasbag62
(g78
g64
NtRp3612
(dp3613
g67
(dp3614
sg76
g3595
sg69
(lp3615
g62
(g83
g64
NtRp3616
(dp3617
g67
(dp3618
sg76
g3612
sg69
(lp3619
g62
(g63
g64
NtRp3620
(dp3621
g67
(dp3622
g75
I4
ssg76
g3616
sg69
(lp3623
S'}}'
p3624
asbasbasbasbasbasbasbag62
(g78
g64
NtRp3625
(dp3626
g67
(dp3627
sg76
g3340
sg69
(lp3628
g62
(g83
g64
NtRp3629
(dp3630
g67
(dp3631
g87
g88
ssg76
g3625
sg69
(lp3632
S'files'
p3633
asbag62
(g83
g64
NtRp3634
(dp3635
g67
(dp3636
g94
g95
ssg76
g3625
sg69
(lp3637
S':'
asbag62
(g83
g64
NtRp3638
(dp3639
g67
(dp3640
sg76
g3625
sg69
(lp3641
g62
(g63
g64
NtRp3642
(dp3643
g67
(dp3644
g75
I5
ssg76
g3638
sg69
(lp3645
g62
(g71
g64
NtRp3646
(dp3647
g67
(dp3648
g75
I4
ssg76
Nsg69
(lp3649
g62
(g78
g64
NtRp3650
(dp3651
g67
(dp3652
sg76
g3646
sg69
(lp3653
g62
(g83
g64
NtRp3654
(dp3655
g67
(dp3656
sg76
g3650
sg69
(lp3657
g62
(g63
g64
NtRp3658
(dp3659
g67
(dp3660
g75
I4
ssg76
g3654
sg69
(lp3661
S'/admin/static/plugin_multiselect/jquery.dimensions.js'
p3662
asbasbasbag62
(g78
g64
NtRp3663
(dp3664
g67
(dp3665
sg76
g3646
sg69
(lp3666
g62
(g83
g64
NtRp3667
(dp3668
g67
(dp3669
sg76
g3663
sg69
(lp3670
g62
(g63
g64
NtRp3671
(dp3672
g67
(dp3673
g75
I4
ssg76
g3667
sg69
(lp3674
S'/admin/static/plugin_multiselect/jquery.multiselect.js'
p3675
asbasbasbag62
(g78
g64
NtRp3676
(dp3677
g67
(dp3678
sg76
g3646
sg69
(lp3679
g62
(g83
g64
NtRp3680
(dp3681
g67
(dp3682
sg76
g3676
sg69
(lp3683
g62
(g63
g64
NtRp3684
(dp3685
g67
(dp3686
g75
I4
ssg76
g3680
sg69
(lp3687
S'/admin/static/plugin_multiselect/jquery.multiselect.css'
p3688
asbasbasbag62
(g78
g64
NtRp3689
(dp3690
g67
(dp3691
sg76
g3646
sg69
(lp3692
g62
(g83
g64
NtRp3693
(dp3694
g67
(dp3695
sg76
g3689
sg69
(lp3696
g62
(g63
g64
NtRp3697
(dp3698
g67
(dp3699
g75
I4
ssg76
g3693
sg69
(lp3700
S'/admin/static/plugin_multiselect/start.js'
p3701
asbasbasbasbasbasbasbag62
(g78
g64
NtRp3702
(dp3703
g67
(dp3704
sg76
g3340
sg69
(lp3705
g62
(g83
g64
NtRp3706
(dp3707
g67
(dp3708
g87
g88
ssg76
g3702
sg69
(lp3709
S'flash'
p3710
asbag62
(g83
g64
NtRp3711
(dp3712
g67
(dp3713
g94
g95
ssg76
g3702
sg69
(lp3714
S':'
asbag62
(g83
g64
NtRp3715
(dp3716
g67
(dp3717
sg76
g3702
sg69
(lp3718
g62
(g63
g64
NtRp3719
(dp3720
g67
(dp3721
g75
I5
ssg76
g3715
sg69
(lp3722
S''
asbasbasbag62
(g78
g64
NtRp3723
(dp3724
g67
(dp3725
sg76
g3340
sg69
(lp3726
g62
(g83
g64
NtRp3727
(dp3728
g67
(dp3729
g87
g88
ssg76
g3723
sg69
(lp3730
S'generic_patterns'
p3731
asbag62
(g83
g64
NtRp3732
(dp3733
g67
(dp3734
g94
g95
ssg76
g3723
sg69
(lp3735
S':'
asbag62
(g83
g64
NtRp3736
(dp3737
g67
(dp3738
sg76
g3723
sg69
(lp3739
g62
(g63
g64
NtRp3740
(dp3741
g67
(dp3742
g75
I5
ssg76
g3736
sg69
(lp3743
g62
(g71
g64
NtRp3744
(dp3745
g67
(dp3746
g75
I4
ssg76
Nsg69
(lp3747
sbasbasbasbag62
(g78
g64
NtRp3748
(dp3749
g67
(dp3750
sg76
g3340
sg69
(lp3751
g62
(g83
g64
NtRp3752
(dp3753
g67
(dp3754
g87
g88
ssg76
g3748
sg69
(lp3755
S'headers'
p3756
asbag62
(g83
g64
NtRp3757
(dp3758
g67
(dp3759
g94
g95
ssg76
g3748
sg69
(lp3760
S':'
asbag62
(g83
g64
NtRp3761
(dp3762
g67
(dp3763
sg76
g3748
sg69
(lp3764
g62
(g63
g64
NtRp3765
(dp3766
g67
(dp3767
g75
I5
ssg76
g3761
sg69
(lp3768
g62
(g71
g64
NtRp3769
(dp3770
g67
(dp3771
g75
I4
ssg76
Nsg69
(lp3772
g62
(g78
g64
NtRp3773
(dp3774
g67
(dp3775
sg76
g3769
sg69
(lp3776
g62
(g83
g64
NtRp3777
(dp3778
g67
(dp3779
g87
g88
ssg76
g3773
sg69
(lp3780
S'Cache-Control'
p3781
asbag62
(g83
g64
NtRp3782
(dp3783
g67
(dp3784
g94
g95
ssg76
g3773
sg69
(lp3785
S':'
asbag62
(g83
g64
NtRp3786
(dp3787
g67
(dp3788
sg76
g3773
sg69
(lp3789
g62
(g63
g64
NtRp3790
(dp3791
g67
(dp3792
g75
I4
ssg76
g3786
sg69
(lp3793
S'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
p3794
asbasbasbag62
(g78
g64
NtRp3795
(dp3796
g67
(dp3797
sg76
g3769
sg69
(lp3798
g62
(g83
g64
NtRp3799
(dp3800
g67
(dp3801
g87
g88
ssg76
g3795
sg69
(lp3802
S'Content-Type'
p3803
asbag62
(g83
g64
NtRp3804
(dp3805
g67
(dp3806
g94
g95
ssg76
g3795
sg69
(lp3807
S':'
asbag62
(g83
g64
NtRp3808
(dp3809
g67
(dp3810
sg76
g3795
sg69
(lp3811
g62
(g63
g64
NtRp3812
(dp3813
g67
(dp3814
g75
I4
ssg76
g3808
sg69
(lp3815
S'text/html; charset=utf-8'
p3816
asbasbasbag62
(g78
g64
NtRp3817
(dp3818
g67
(dp3819
sg76
g3769
sg69
(lp3820
g62
(g83
g64
NtRp3821
(dp3822
g67
(dp3823
g87
g88
ssg76
g3817
sg69
(lp3824
S'Expires'
p3825
asbag62
(g83
g64
NtRp3826
(dp3827
g67
(dp3828
g94
g95
ssg76
g3817
sg69
(lp3829
S':'
asbag62
(g83
g64
NtRp3830
(dp3831
g67
(dp3832
sg76
g3817
sg69
(lp3833
g62
(g63
g64
NtRp3834
(dp3835
g67
(dp3836
g75
I4
ssg76
g3830
sg69
(lp3837
S'Sat, 03 Nov 2012 13:39:06 GMT'
p3838
asbasbasbag62
(g78
g64
NtRp3839
(dp3840
g67
(dp3841
sg76
g3769
sg69
(lp3842
g62
(g83
g64
NtRp3843
(dp3844
g67
(dp3845
g87
g88
ssg76
g3839
sg69
(lp3846
S'Pragma'
p3847
asbag62
(g83
g64
NtRp3848
(dp3849
g67
(dp3850
g94
g95
ssg76
g3839
sg69
(lp3851
S':'
asbag62
(g83
g64
NtRp3852
(dp3853
g67
(dp3854
sg76
g3839
sg69
(lp3855
g62
(g63
g64
NtRp3856
(dp3857
g67
(dp3858
g75
I4
ssg76
g3852
sg69
(lp3859
S'no-cache'
p3860
asbasbasbag62
(g78
g64
NtRp3861
(dp3862
g67
(dp3863
sg76
g3769
sg69
(lp3864
g62
(g83
g64
NtRp3865
(dp3866
g67
(dp3867
g87
g88
ssg76
g3861
sg69
(lp3868
S'X-Powered-By'
p3869
asbag62
(g83
g64
NtRp3870
(dp3871
g67
(dp3872
g94
g95
ssg76
g3861
sg69
(lp3873
S':'
asbag62
(g83
g64
NtRp3874
(dp3875
g67
(dp3876
sg76
g3861
sg69
(lp3877
g62
(g63
g64
NtRp3878
(dp3879
g67
(dp3880
g75
I4
ssg76
g3874
sg69
(lp3881
S'web2py'
p3882
asbasbasbasbasbasbasbag62
(g78
g64
NtRp3883
(dp3884
g67
(dp3885
sg76
g3340
sg69
(lp3886
g62
(g83
g64
NtRp3887
(dp3888
g67
(dp3889
g87
g88
ssg76
g3883
sg69
(lp3890
S'menu'
p3891
asbag62
(g83
g64
NtRp3892
(dp3893
g67
(dp3894
g94
g95
ssg76
g3883
sg69
(lp3895
S':'
asbag62
(g83
g64
NtRp3896
(dp3897
g67
(dp3898
sg76
g3883
sg69
(lp3899
g62
(g63
g64
NtRp3900
(dp3901
g67
(dp3902
g75
I5
ssg76
g3896
sg69
(lp3903
g62
(g71
g64
NtRp3904
(dp3905
g67
(dp3906
g75
I4
ssg76
Nsg69
(lp3907
g62
(g78
g64
NtRp3908
(dp3909
g67
(dp3910
sg76
g3904
sg69
(lp3911
g62
(g83
g64
NtRp3912
(dp3913
g67
(dp3914
sg76
g3908
sg69
(lp3915
g62
(g63
g64
NtRp3916
(dp3917
g67
(dp3918
g75
I4
ssg76
g3912
sg69
(lp3919
g62
(g71
g64
NtRp3920
(dp3921
g67
(dp3922
g75
I3
ssg76
Nsg69
(lp3923
g62
(g78
g64
NtRp3924
(dp3925
g67
(dp3926
sg76
g3920
sg69
(lp3927
g62
(g83
g64
NtRp3928
(dp3929
g67
(dp3930
sg76
g3924
sg69
(lp3931
g62
(g63
g64
NtRp3932
(dp3933
g67
(dp3934
g75
I3
ssg76
g3928
sg69
(lp3935
cgluon.languages
lazyT_unpickle
p3936
(S's\x04\x00\x00\x00Site'
tRp3937
asbasbasbag62
(g78
g64
NtRp3938
(dp3939
g67
(dp3940
sg76
g3920
sg69
(lp3941
g62
(g83
g64
NtRp3942
(dp3943
g67
(dp3944
sg76
g3938
sg69
(lp3945
g62
(g63
g64
NtRp3946
(dp3947
g67
(dp3948
g75
I3
ssg76
g3942
sg69
(lp3949
g105
asbasbasbag62
(g78
g64
NtRp3950
(dp3951
g67
(dp3952
sg76
g3920
sg69
(lp3953
g62
(g83
g64
NtRp3954
(dp3955
g67
(dp3956
sg76
g3950
sg69
(lp3957
g62
(g63
g64
NtRp3958
(dp3959
g67
(dp3960
g75
I3
ssg76
g3954
sg69
(lp3961
S'/admin/default/site'
p3962
asbasbasbasbasbasbasbag62
(g78
g64
NtRp3963
(dp3964
g67
(dp3965
sg76
g3904
sg69
(lp3966
g62
(g83
g64
NtRp3967
(dp3968
g67
(dp3969
sg76
g3963
sg69
(lp3970
g62
(g63
g64
NtRp3971
(dp3972
g67
(dp3973
g75
I4
ssg76
g3967
sg69
(lp3974
g62
(g71
g64
NtRp3975
(dp3976
g67
(dp3977
g75
I3
ssg76
Nsg69
(lp3978
g62
(g78
g64
NtRp3979
(dp3980
g67
(dp3981
sg76
g3975
sg69
(lp3982
g62
(g83
g64
NtRp3983
(dp3984
g67
(dp3985
sg76
g3979
sg69
(lp3986
g62
(g63
g64
NtRp3987
(dp3988
g67
(dp3989
g75
I3
ssg76
g3983
sg69
(lp3990
g3936
(S's\x04\x00\x00\x00Edit'
tRp3991
asbasbasbag62
(g78
g64
NtRp3992
(dp3993
g67
(dp3994
sg76
g3975
sg69
(lp3995
g62
(g83
g64
NtRp3996
(dp3997
g67
(dp3998
sg76
g3992
sg69
(lp3999
g62
(g63
g64
NtRp4000
(dp4001
g67
(dp4002
g75
I3
ssg76
g3996
sg69
(lp4003
g1719
asbasbasbag62
(g78
g64
NtRp4004
(dp4005
g67
(dp4006
sg76
g3975
sg69
(lp4007
g62
(g83
g64
NtRp4008
(dp4009
g67
(dp4010
sg76
g4004
sg69
(lp4011
g62
(g63
g64
NtRp4012
(dp4013
g67
(dp4014
g75
I3
ssg76
g4008
sg69
(lp4015
S'/admin/default/design/taship1'
p4016
asbasbasbasbasbasbasbag62
(g78
g64
NtRp4017
(dp4018
g67
(dp4019
sg76
g3904
sg69
(lp4020
g62
(g83
g64
NtRp4021
(dp4022
g67
(dp4023
sg76
g4017
sg69
(lp4024
g62
(g63
g64
NtRp4025
(dp4026
g67
(dp4027
g75
I4
ssg76
g4021
sg69
(lp4028
g62
(g71
g64
NtRp4029
(dp4030
g67
(dp4031
g75
I3
ssg76
Nsg69
(lp4032
g62
(g78
g64
NtRp4033
(dp4034
g67
(dp4035
sg76
g4029
sg69
(lp4036
g62
(g83
g64
NtRp4037
(dp4038
g67
(dp4039
sg76
g4033
sg69
(lp4040
g62
(g63
g64
NtRp4041
(dp4042
g67
(dp4043
g75
I3
ssg76
g4037
sg69
(lp4044
g3936
(S's\x05\x00\x00\x00About'
tRp4045
asbasbasbag62
(g78
g64
NtRp4046
(dp4047
g67
(dp4048
sg76
g4029
sg69
(lp4049
g62
(g83
g64
NtRp4050
(dp4051
g67
(dp4052
sg76
g4046
sg69
(lp4053
g62
(g63
g64
NtRp4054
(dp4055
g67
(dp4056
g75
I3
ssg76
g4050
sg69
(lp4057
g105
asbasbasbag62
(g78
g64
NtRp4058
(dp4059
g67
(dp4060
sg76
g4029
sg69
(lp4061
g62
(g83
g64
NtRp4062
(dp4063
g67
(dp4064
sg76
g4058
sg69
(lp4065
g62
(g63
g64
NtRp4066
(dp4067
g67
(dp4068
g75
I3
ssg76
g4062
sg69
(lp4069
S'/admin/default/about/taship1'
p4070
asbasbasbasbasbasbasbag62
(g78
g64
NtRp4071
(dp4072
g67
(dp4073
sg76
g3904
sg69
(lp4074
g62
(g83
g64
NtRp4075
(dp4076
g67
(dp4077
sg76
g4071
sg69
(lp4078
g62
(g63
g64
NtRp4079
(dp4080
g67
(dp4081
g75
I4
ssg76
g4075
sg69
(lp4082
g62
(g71
g64
NtRp4083
(dp4084
g67
(dp4085
g75
I3
ssg76
Nsg69
(lp4086
g62
(g78
g64
NtRp4087
(dp4088
g67
(dp4089
sg76
g4083
sg69
(lp4090
g62
(g83
g64
NtRp4091
(dp4092
g67
(dp4093
sg76
g4087
sg69
(lp4094
g62
(g63
g64
NtRp4095
(dp4096
g67
(dp4097
g75
I3
ssg76
g4091
sg69
(lp4098
g3936
(S's\x06\x00\x00\x00Errors'
tRp4099
asbasbasbag62
(g78
g64
NtRp4100
(dp4101
g67
(dp4102
sg76
g4083
sg69
(lp4103
g62
(g83
g64
NtRp4104
(dp4105
g67
(dp4106
sg76
g4100
sg69
(lp4107
g62
(g63
g64
NtRp4108
(dp4109
g67
(dp4110
g75
I3
ssg76
g4104
sg69
(lp4111
g105
asbasbasbag62
(g78
g64
NtRp4112
(dp4113
g67
(dp4114
sg76
g4083
sg69
(lp4115
g62
(g83
g64
NtRp4116
(dp4117
g67
(dp4118
sg76
g4112
sg69
(lp4119
g62
(g63
g64
NtRp4120
(dp4121
g67
(dp4122
g75
I3
ssg76
g4116
sg69
(lp4123
S'/admin/default/errors/taship1'
p4124
asbasbasbasbasbasbasbag62
(g78
g64
NtRp4125
(dp4126
g67
(dp4127
sg76
g3904
sg69
(lp4128
g62
(g83
g64
NtRp4129
(dp4130
g67
(dp4131
sg76
g4125
sg69
(lp4132
g62
(g63
g64
NtRp4133
(dp4134
g67
(dp4135
g75
I4
ssg76
g4129
sg69
(lp4136
g62
(g71
g64
NtRp4137
(dp4138
g67
(dp4139
g75
I3
ssg76
Nsg69
(lp4140
g62
(g78
g64
NtRp4141
(dp4142
g67
(dp4143
sg76
g4137
sg69
(lp4144
g62
(g83
g64
NtRp4145
(dp4146
g67
(dp4147
sg76
g4141
sg69
(lp4148
g62
(g63
g64
NtRp4149
(dp4150
g67
(dp4151
g75
I3
ssg76
g4145
sg69
(lp4152
g3936
(S's\n\x00\x00\x00Versioning'
tRp4153
asbasbasbag62
(g78
g64
NtRp4154
(dp4155
g67
(dp4156
sg76
g4137
sg69
(lp4157
g62
(g83
g64
NtRp4158
(dp4159
g67
(dp4160
sg76
g4154
sg69
(lp4161
g62
(g63
g64
NtRp4162
(dp4163
g67
(dp4164
g75
I3
ssg76
g4158
sg69
(lp4165
g105
asbasbasbag62
(g78
g64
NtRp4166
(dp4167
g67
(dp4168
sg76
g4137
sg69
(lp4169
g62
(g83
g64
NtRp4170
(dp4171
g67
(dp4172
sg76
g4166
sg69
(lp4173
g62
(g63
g64
NtRp4174
(dp4175
g67
(dp4176
g75
I3
ssg76
g4170
sg69
(lp4177
S'/admin/mercurial/commit/taship1'
p4178
asbasbasbasbasbasbasbag62
(g78
g64
NtRp4179
(dp4180
g67
(dp4181
sg76
g3904
sg69
(lp4182
g62
(g83
g64
NtRp4183
(dp4184
g67
(dp4185
sg76
g4179
sg69
(lp4186
g62
(g63
g64
NtRp4187
(dp4188
g67
(dp4189
g75
I4
ssg76
g4183
sg69
(lp4190
g62
(g71
g64
NtRp4191
(dp4192
g67
(dp4193
g75
I3
ssg76
Nsg69
(lp4194
g62
(g78
g64
NtRp4195
(dp4196
g67
(dp4197
sg76
g4191
sg69
(lp4198
g62
(g83
g64
NtRp4199
(dp4200
g67
(dp4201
sg76
g4195
sg69
(lp4202
g62
(g63
g64
NtRp4203
(dp4204
g67
(dp4205
g75
I3
ssg76
g4199
sg69
(lp4206
g3936
(S's\x06\x00\x00\x00Logout'
tRp4207
asbasbasbag62
(g78
g64
NtRp4208
(dp4209
g67
(dp4210
sg76
g4191
sg69
(lp4211
g62
(g83
g64
NtRp4212
(dp4213
g67
(dp4214
sg76
g4208
sg69
(lp4215
g62
(g63
g64
NtRp4216
(dp4217
g67
(dp4218
g75
I3
ssg76
g4212
sg69
(lp4219
g105
asbasbasbag62
(g78
g64
NtRp4220
(dp4221
g67
(dp4222
sg76
g4191
sg69
(lp4223
g62
(g83
g64
NtRp4224
(dp4225
g67
(dp4226
sg76
g4220
sg69
(lp4227
g62
(g63
g64
NtRp4228
(dp4229
g67
(dp4230
g75
I3
ssg76
g4224
sg69
(lp4231
S'/admin/default/logout'
p4232
asbasbasbasbasbasbasbag62
(g78
g64
NtRp4233
(dp4234
g67
(dp4235
sg76
g3904
sg69
(lp4236
g62
(g83
g64
NtRp4237
(dp4238
g67
(dp4239
sg76
g4233
sg69
(lp4240
g62
(g63
g64
NtRp4241
(dp4242
g67
(dp4243
g75
I4
ssg76
g4237
sg69
(lp4244
g62
(g71
g64
NtRp4245
(dp4246
g67
(dp4247
g75
I3
ssg76
Nsg69
(lp4248
g62
(g78
g64
NtRp4249
(dp4250
g67
(dp4251
sg76
g4245
sg69
(lp4252
g62
(g83
g64
NtRp4253
(dp4254
g67
(dp4255
sg76
g4249
sg69
(lp4256
g62
(g63
g64
NtRp4257
(dp4258
g67
(dp4259
g75
I3
ssg76
g4253
sg69
(lp4260
g3936
(S's\x05\x00\x00\x00Debug'
tRp4261
asbasbasbag62
(g78
g64
NtRp4262
(dp4263
g67
(dp4264
sg76
g4245
sg69
(lp4265
g62
(g83
g64
NtRp4266
(dp4267
g67
(dp4268
sg76
g4262
sg69
(lp4269
g62
(g63
g64
NtRp4270
(dp4271
g67
(dp4272
g75
I3
ssg76
g4266
sg69
(lp4273
g105
asbasbasbag62
(g78
g64
NtRp4274
(dp4275
g67
(dp4276
sg76
g4245
sg69
(lp4277
g62
(g83
g64
NtRp4278
(dp4279
g67
(dp4280
sg76
g4274
sg69
(lp4281
g62
(g63
g64
NtRp4282
(dp4283
g67
(dp4284
g75
I3
ssg76
g4278
sg69
(lp4285
S'/admin/debug/interact'
p4286
asbasbasbasbasbasbasbag62
(g78
g64
NtRp4287
(dp4288
g67
(dp4289
sg76
g3904
sg69
(lp4290
g62
(g83
g64
NtRp4291
(dp4292
g67
(dp4293
sg76
g4287
sg69
(lp4294
g62
(g63
g64
NtRp4295
(dp4296
g67
(dp4297
g75
I4
ssg76
g4291
sg69
(lp4298
g62
(g71
g64
NtRp4299
(dp4300
g67
(dp4301
g75
I3
ssg76
Nsg69
(lp4302
g62
(g78
g64
NtRp4303
(dp4304
g67
(dp4305
sg76
g4299
sg69
(lp4306
g62
(g83
g64
NtRp4307
(dp4308
g67
(dp4309
sg76
g4303
sg69
(lp4310
g62
(g63
g64
NtRp4311
(dp4312
g67
(dp4313
g75
I3
ssg76
g4307
sg69
(lp4314
g3936
(S's\x04\x00\x00\x00Help'
tRp4315
asbasbasbag62
(g78
g64
NtRp4316
(dp4317
g67
(dp4318
sg76
g4299
sg69
(lp4319
g62
(g83
g64
NtRp4320
(dp4321
g67
(dp4322
sg76
g4316
sg69
(lp4323
g62
(g63
g64
NtRp4324
(dp4325
g67
(dp4326
g75
I3
ssg76
g4320
sg69
(lp4327
g105
asbasbasbag62
(g78
g64
NtRp4328
(dp4329
g67
(dp4330
sg76
g4299
sg69
(lp4331
g62
(g83
g64
NtRp4332
(dp4333
g67
(dp4334
sg76
g4328
sg69
(lp4335
g62
(g63
g64
NtRp4336
(dp4337
g67
(dp4338
g75
I3
ssg76
g4332
sg69
(lp4339
S'/examples/default/index'
p4340
asbasbasbasbasbasbasbasbasbasbasbag62
(g78
g64
NtRp4341
(dp4342
g67
(dp4343
sg76
g3340
sg69
(lp4344
g62
(g83
g64
NtRp4345
(dp4346
g67
(dp4347
g87
g88
ssg76
g4341
sg69
(lp4348
S'meta'
p4349
asbag62
(g83
g64
NtRp4350
(dp4351
g67
(dp4352
g94
g95
ssg76
g4341
sg69
(lp4353
S':'
asbag62
(g83
g64
NtRp4354
(dp4355
g67
(dp4356
sg76
g4341
sg69
(lp4357
g62
(g63
g64
NtRp4358
(dp4359
g67
(dp4360
g75
I5
ssg76
g4354
sg69
(lp4361
g62
(g71
g64
NtRp4362
(dp4363
g67
(dp4364
g75
I4
ssg76
Nsg69
(lp4365
sbasbasbasbag62
(g78
g64
NtRp4366
(dp4367
g67
(dp4368
sg76
g3340
sg69
(lp4369
g62
(g83
g64
NtRp4370
(dp4371
g67
(dp4372
g87
g88
ssg76
g4366
sg69
(lp4373
S'models_to_run'
p4374
asbag62
(g83
g64
NtRp4375
(dp4376
g67
(dp4377
g94
g95
ssg76
g4366
sg69
(lp4378
S':'
asbag62
(g83
g64
NtRp4379
(dp4380
g67
(dp4381
sg76
g4366
sg69
(lp4382
g62
(g63
g64
NtRp4383
(dp4384
g67
(dp4385
g75
I5
ssg76
g4379
sg69
(lp4386
g62
(g71
g64
NtRp4387
(dp4388
g67
(dp4389
g75
I4
ssg76
Nsg69
(lp4390
g62
(g78
g64
NtRp4391
(dp4392
g67
(dp4393
sg76
g4387
sg69
(lp4394
g62
(g83
g64
NtRp4395
(dp4396
g67
(dp4397
sg76
g4391
sg69
(lp4398
g62
(g63
g64
NtRp4399
(dp4400
g67
(dp4401
g75
I4
ssg76
g4395
sg69
(lp4402
S'^\\w+\\.py$'
p4403
asbasbasbag62
(g78
g64
NtRp4404
(dp4405
g67
(dp4406
sg76
g4387
sg69
(lp4407
g62
(g83
g64
NtRp4408
(dp4409
g67
(dp4410
sg76
g4404
sg69
(lp4411
g62
(g63
g64
NtRp4412
(dp4413
g67
(dp4414
g75
I4
ssg76
g4408
sg69
(lp4415
S'^default/\\w+\\.py$'
p4416
asbasbasbag62
(g78
g64
NtRp4417
(dp4418
g67
(dp4419
sg76
g4387
sg69
(lp4420
g62
(g83
g64
NtRp4421
(dp4422
g67
(dp4423
sg76
g4417
sg69
(lp4424
g62
(g63
g64
NtRp4425
(dp4426
g67
(dp4427
g75
I4
ssg76
g4421
sg69
(lp4428
S'^default/design/\\w+\\.py$'
p4429
asbasbasbasbasbasbasbag62
(g78
g64
NtRp4430
(dp4431
g67
(dp4432
sg76
g3340
sg69
(lp4433
g62
(g83
g64
NtRp4434
(dp4435
g67
(dp4436
g87
g88
ssg76
g4430
sg69
(lp4437
S'postprocessing'
p4438
asbag62
(g83
g64
NtRp4439
(dp4440
g67
(dp4441
g94
g95
ssg76
g4430
sg69
(lp4442
S':'
asbag62
(g83
g64
NtRp4443
(dp4444
g67
(dp4445
sg76
g4430
sg69
(lp4446
g62
(g63
g64
NtRp4447
(dp4448
g67
(dp4449
g75
I5
ssg76
g4443
sg69
(lp4450
g62
(g71
g64
NtRp4451
(dp4452
g67
(dp4453
g75
I4
ssg76
Nsg69
(lp4454
sbasbasbasbag62
(g78
g64
NtRp4455
(dp4456
g67
(dp4457
sg76
g3340
sg69
(lp4458
g62
(g83
g64
NtRp4459
(dp4460
g67
(dp4461
g87
g88
ssg76
g4455
sg69
(lp4462
S'session_file'
p4463
asbag62
(g83
g64
NtRp4464
(dp4465
g67
(dp4466
g94
g95
ssg76
g4455
sg69
(lp4467
S':'
asbag62
(g83
g64
NtRp4468
(dp4469
g67
(dp4470
sg76
g4455
sg69
(lp4471
g62
(g63
g64
NtRp4472
(dp4473
g67
(dp4474
g75
I5
ssg76
g4468
sg69
(lp4475
S"<open file '/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/admin/sessions/127.0.0.1-c1d41aae-308e-4c05-973c-3c5b3bef2473', mode 'rb+' at 0x7fd9a03fec90>"
p4476
asbasbasbag62
(g78
g64
NtRp4477
(dp4478
g67
(dp4479
sg76
g3340
sg69
(lp4480
g62
(g83
g64
NtRp4481
(dp4482
g67
(dp4483
g87
g88
ssg76
g4477
sg69
(lp4484
S'session_filename'
p4485
asbag62
(g83
g64
NtRp4486
(dp4487
g67
(dp4488
g94
g95
ssg76
g4477
sg69
(lp4489
S':'
asbag62
(g83
g64
NtRp4490
(dp4491
g67
(dp4492
sg76
g4477
sg69
(lp4493
g62
(g63
g64
NtRp4494
(dp4495
g67
(dp4496
g75
I5
ssg76
g4490
sg69
(lp4497
S'/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/admin/sessions/127.0.0.1-c1d41aae-308e-4c05-973c-3c5b3bef2473'
p4498
asbasbasbag62
(g78
g64
NtRp4499
(dp4500
g67
(dp4501
sg76
g3340
sg69
(lp4502
g62
(g83
g64
NtRp4503
(dp4504
g67
(dp4505
g87
g88
ssg76
g4499
sg69
(lp4506
S'session_id'
p4507
asbag62
(g83
g64
NtRp4508
(dp4509
g67
(dp4510
g94
g95
ssg76
g4499
sg69
(lp4511
S':'
asbag62
(g83
g64
NtRp4512
(dp4513
g67
(dp4514
sg76
g4499
sg69
(lp4515
g62
(g63
g64
NtRp4516
(dp4517
g67
(dp4518
g75
I5
ssg76
g4512
sg69
(lp4519
g299
asbasbasbag62
(g78
g64
NtRp4520
(dp4521
g67
(dp4522
sg76
g3340
sg69
(lp4523
g62
(g83
g64
NtRp4524
(dp4525
g67
(dp4526
g87
g88
ssg76
g4520
sg69
(lp4527
S'session_id_name'
p4528
asbag62
(g83
g64
NtRp4529
(dp4530
g67
(dp4531
g94
g95
ssg76
g4520
sg69
(lp4532
S':'
asbag62
(g83
g64
NtRp4533
(dp4534
g67
(dp4535
sg76
g4520
sg69
(lp4536
g62
(g63
g64
NtRp4537
(dp4538
g67
(dp4539
g75
I5
ssg76
g4533
sg69
(lp4540
g3397
asbasbasbag62
(g78
g64
NtRp4541
(dp4542
g67
(dp4543
sg76
g3340
sg69
(lp4544
g62
(g83
g64
NtRp4545
(dp4546
g67
(dp4547
g87
g88
ssg76
g4541
sg69
(lp4548
S'session_locked'
p4549
asbag62
(g83
g64
NtRp4550
(dp4551
g67
(dp4552
g94
g95
ssg76
g4541
sg69
(lp4553
S':'
asbag62
(g83
g64
NtRp4554
(dp4555
g67
(dp4556
sg76
g4541
sg69
(lp4557
g62
(g63
g64
NtRp4558
(dp4559
g67
(dp4560
g75
I5
ssg76
g4554
sg69
(lp4561
g1719
asbasbasbag62
(g78
g64
NtRp4562
(dp4563
g67
(dp4564
sg76
g3340
sg69
(lp4565
g62
(g83
g64
NtRp4566
(dp4567
g67
(dp4568
g87
g88
ssg76
g4562
sg69
(lp4569
S'session_new'
p4570
asbag62
(g83
g64
NtRp4571
(dp4572
g67
(dp4573
g94
g95
ssg76
g4562
sg69
(lp4574
S':'
asbag62
(g83
g64
NtRp4575
(dp4576
g67
(dp4577
sg76
g4562
sg69
(lp4578
g62
(g63
g64
NtRp4579
(dp4580
g67
(dp4581
g75
I5
ssg76
g4575
sg69
(lp4582
g105
asbasbasbag62
(g78
g64
NtRp4583
(dp4584
g67
(dp4585
sg76
g3340
sg69
(lp4586
g62
(g83
g64
NtRp4587
(dp4588
g67
(dp4589
g87
g88
ssg76
g4583
sg69
(lp4590
S'status'
p4591
asbag62
(g83
g64
NtRp4592
(dp4593
g67
(dp4594
g94
g95
ssg76
g4583
sg69
(lp4595
S':'
asbag62
(g83
g64
NtRp4596
(dp4597
g67
(dp4598
sg76
g4583
sg69
(lp4599
g62
(g63
g64
NtRp4600
(dp4601
g67
(dp4602
g75
I5
ssg76
g4596
sg69
(lp4603
S'200'
p4604
asbasbasbag62
(g78
g64
NtRp4605
(dp4606
g67
(dp4607
sg76
g3340
sg69
(lp4608
g62
(g83
g64
NtRp4609
(dp4610
g67
(dp4611
g87
g88
ssg76
g4605
sg69
(lp4612
S'subtitle'
p4613
asbag62
(g83
g64
NtRp4614
(dp4615
g67
(dp4616
g94
g95
ssg76
g4605
sg69
(lp4617
S':'
asbag62
(g83
g64
NtRp4618
(dp4619
g67
(dp4620
sg76
g4605
sg69
(lp4621
g62
(g63
g64
NtRp4622
(dp4623
g67
(dp4624
g75
I5
ssg76
g4618
sg69
(lp4625
S'admin'
p4626
asbasbasbag62
(g78
g64
NtRp4627
(dp4628
g67
(dp4629
sg76
g3340
sg69
(lp4630
g62
(g83
g64
NtRp4631
(dp4632
g67
(dp4633
g87
g88
ssg76
g4627
sg69
(lp4634
S'title'
p4635
asbag62
(g83
g64
NtRp4636
(dp4637
g67
(dp4638
g94
g95
ssg76
g4627
sg69
(lp4639
S':'
asbag62
(g83
g64
NtRp4640
(dp4641
g67
(dp4642
sg76
g4627
sg69
(lp4643
g62
(g63
g64
NtRp4644
(dp4645
g67
(dp4646
g75
I5
ssg76
g4640
sg69
(lp4647
S'design taship1'
p4648
asbasbasbag62
(g78
g64
NtRp4649
(dp4650
g67
(dp4651
sg76
g3340
sg69
(lp4652
g62
(g83
g64
NtRp4653
(dp4654
g67
(dp4655
g87
g88
ssg76
g4649
sg69
(lp4656
S'view'
p4657
asbag62
(g83
g64
NtRp4658
(dp4659
g67
(dp4660
g94
g95
ssg76
g4649
sg69
(lp4661
S':'
asbag62
(g83
g64
NtRp4662
(dp4663
g67
(dp4664
sg76
g4649
sg69
(lp4665
g62
(g63
g64
NtRp4666
(dp4667
g67
(dp4668
g75
I5
ssg76
g4662
sg69
(lp4669
S'default/design.html'
p4670
asbasbasbasbasbsS'locals'
p4671
(dp4672
S'appdir'
p4673
S"'/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/taship1'"
p4674
sS'langs'
p4675
g19
sS'langdir'
p4676
S"'/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/taship1/languages'"
p4677
sssS'traceback'
p4678
S'Traceback (most recent call last):\n  File "/home/mayank/IIIT/sem 3/SSAD&Project/web2py/gluon/restricted.py", line 209, in restricted\n    exec ccode in environment\n  File "/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/admin/controllers/default.py", line 1726, in <module>\n  File "/home/mayank/IIIT/sem 3/SSAD&Project/web2py/gluon/globals.py", line 185, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/admin/controllers/default.py", line 953, in design\n    in read_possible_languages(apath(app, r=request)).iteritems()\n  File "/home/mayank/IIIT/sem 3/SSAD&Project/web2py/gluon/languages.py", line 209, in read_possible_languages\n    for filename in os.listdir(langdir):\nOSError: [Errno 2] No such file or directory: \'/home/mayank/IIIT/sem 3/SSAD&Project/web2py/applications/taship1/languages\'\n'
p4679
s.