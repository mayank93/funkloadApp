(dp1
S'output'
p2
S'<type \'exceptions.ValueError\'> invalid literal for int() with base 10: "[\'8\']"'
p3
sS'layer'
p4
S'/home/mayank/Desktop/web2pyAdmin/web2py/web2py/applications/FunkLoad/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\nimport os\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\n#-----------------------Error Page-----------------------------------\n#if java script dissabled\ndef error():\n\t        return dict()\n\n#-----------------------Home Page------------------------------------\n@auth.requires_login()\ndef index():\n    \tsession.email=auth.user.email\n    \tprint session.email\n    \treturn dict()\n\ndef sanity():\n    \treturn dict()\n\ndef functional():\n    \treturn dict()\n\ndef stress():\n    \treturn dict()\n\n\ndef test():\n\ttid=request.args\n\tprint tid\n    \tsession.email=auth.user.email\n    \tprint session.email\n\tdetails=db(db.TestDetails.id == str(tid)).select()[0]\n\t#functionalDetails=db(db..id == str(tid)).select()\n\tstressDetails=str(tid)+\'/index.html\'\n\n    \treturn dict(details=details,stressDetails=stressDetails)\n\ndef testDetails():\n    \tsession.email=auth.user.email\n    \tprint session.email\n\tdetails=db(db.TestDetails.UserEmail == session.email).select() \n\tprint details\n\treturn dict(details=details)\n\ndef addTest():\n    \tsession.email=auth.user.email\n    \tprint session.email\n\tif request.vars.Submit==\'Submit\' :\n\t\tTestName=request.vars.TestName\n\t\tUrlName=request.vars.UrlName\n\t\tCycleUser=request.vars.CycleUser\n\t\tCycleDuration=request.vars.CycleDuration\n\t\tRequestPerUser=request.vars.RequestPerUser\n\t\tDescription=request.vars.Description\n\t\tif not Description:\n\t\t\tDescription=UrlName\n\t\tprint TestName\n\t\tprint UrlName\n\t\tprint CycleUser\n\t\tprint CycleDuration\n\t\tprint RequestPerUser\n#\t\tm=\'\'\n#\t\tmail.send(auth.user.email,subject=\' Received your Updated Response"\',message=m)\n\t\ttid=db.TestDetails.insert(TestName=TestName,UserEmail=session.email,Url=UrlName,CycleDuration=CycleDuration,CycleUser=CycleUser,RequestPerUser=RequestPerUser,Description=Description)\n\t\tdb.commit()\n\t\ta=os.getcwd()+\'/applications/FunkLoad/static/\'+str(tid)\n\t\tos.mkdir(a)\n\t\tredirect(URL(r=request, f=\'testDetails\'))\n\treturn dict()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(test)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/mayank/Desktop/web2pyAdmin/web2py/web2py/gluon/restricted.py", line 209, in restricted\n    exec ccode in environment\n  File "/home/mayank/Desktop/web2pyAdmin/web2py/web2py/applications/FunkLoad/controllers/default.py", line 131, in <module>\n  File "/home/mayank/Desktop/web2pyAdmin/web2py/web2py/gluon/globals.py", line 185, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/mayank/Desktop/web2pyAdmin/web2py/web2py/applications/FunkLoad/controllers/default.py", line 40, in test\n    details=db(db.TestDetails.id == str(tid)).select()[0]\n  File "/home/mayank/Desktop/web2pyAdmin/web2py/web2py/gluon/dal.py", line 8743, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/mayank/Desktop/web2pyAdmin/web2py/web2py/gluon/dal.py", line 1570, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/mayank/Desktop/web2pyAdmin/web2py/web2py/gluon/dal.py", line 1443, in _select\n    sql_w = \' WHERE \' + self.expand(query)\n  File "/home/mayank/Desktop/web2pyAdmin/web2py/web2py/gluon/dal.py", line 1276, in expand\n    return op(first, second)\n  File "/home/mayank/Desktop/web2pyAdmin/web2py/web2py/gluon/dal.py", line 1204, in EQ\n    self.expand(second, first.type))\n  File "/home/mayank/Desktop/web2pyAdmin/web2py/web2py/gluon/dal.py", line 1286, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/mayank/Desktop/web2pyAdmin/web2py/web2py/gluon/dal.py", line 1696, in represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: "[\'8\']"\n'
p11
s.